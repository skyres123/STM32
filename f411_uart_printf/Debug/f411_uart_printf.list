
f411_uart_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001508  08001508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c0  080015c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015c0  080015c0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c0  080015c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015c4  080015c4  000115c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08001630  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001630  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000396e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000afe  00000000  00000000  00023a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  000247b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154a1  00000000  00000000  00024a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e23  00000000  00000000  00039ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ebf  00000000  00000000  0003ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000109c  00000000  00000000  000c0bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014f0 	.word	0x080014f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080014f0 	.word	0x080014f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
void uart2_tx_init(void);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f80f 	bl	80002ac <uart2_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <main>:
int main(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800029c:	f000 f81e 	bl	80002dc <uart2_tx_init>


while(1){
	printf("Hello From STM32F441.........\n\r");
 80002a0:	4801      	ldr	r0, [pc, #4]	; (80002a8 <main+0x10>)
 80002a2:	f000 f9cf 	bl	8000644 <iprintf>
 80002a6:	e7fb      	b.n	80002a0 <main+0x8>
 80002a8:	08001508 	.word	0x08001508

080002ac <uart2_write>:
}
}
void uart2_write(int ch){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	//make sure transmit data register is empty
	while (!(USART2-> SR & SR_TXE)){}
 80002b4:	bf00      	nop
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <uart2_write+0x2c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <uart2_write+0xa>
	//write to transmit data register

	USART2 -> DR = (ch & 0xFF);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <uart2_write+0x2c>)
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	6053      	str	r3, [r2, #4]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40004400 	.word	0x40004400

080002dc <uart2_tx_init>:
void uart2_tx_init(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//---------configure uart gpÄ±o pin--------
	//enable clock accsess to gpioa
	RCC->AHB1ENR |= GPIOEN;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <uart2_tx_init+0x70>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a19      	ldr	r2, [pc, #100]	; (800034c <uart2_tx_init+0x70>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30

	// set PA2 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<4);
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <uart2_tx_init+0x74>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <uart2_tx_init+0x74>)
 80002f2:	f023 0310 	bic.w	r3, r3, #16
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<5);
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <uart2_tx_init+0x74>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <uart2_tx_init+0x74>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6013      	str	r3, [r2, #0]

	//set PA2 alternate. function. type to UART_TX (AF07)
	GPIOA->AFR[0] |= ((1u<<10)|(1u<<9)|(1u<<8));
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <uart2_tx_init+0x74>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a11      	ldr	r2, [pc, #68]	; (8000350 <uart2_tx_init+0x74>)
 800030a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800030e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<11);
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <uart2_tx_init+0x74>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <uart2_tx_init+0x74>)
 8000316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800031a:	6213      	str	r3, [r2, #32]

	//---------configure uart module ---------
	//enable clock access
	RCC->APB1ENR |= UART2EN;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <uart2_tx_init+0x70>)
 800031e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <uart2_tx_init+0x70>)
 8000322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000326:	6413      	str	r3, [r2, #64]	; 0x40

	//configure the uart baud rate
	uart_set_baudrate(USART2 ,APB1_CLK ,UART_BAUDRATE);
 8000328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800032c:	4909      	ldr	r1, [pc, #36]	; (8000354 <uart2_tx_init+0x78>)
 800032e:	480a      	ldr	r0, [pc, #40]	; (8000358 <uart2_tx_init+0x7c>)
 8000330:	f000 f814 	bl	800035c <uart_set_baudrate>

	//congigure the transfer direction
	USART2 -> CR1 = CR1_TE;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <uart2_tx_init+0x7c>)
 8000336:	2208      	movs	r2, #8
 8000338:	60da      	str	r2, [r3, #12]

	//enable uart module
	USART2 -> CR1 |= CR1_UE;
 800033a:	4b07      	ldr	r3, [pc, #28]	; (8000358 <uart2_tx_init+0x7c>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <uart2_tx_init+0x7c>)
 8000340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000344:	60d3      	str	r3, [r2, #12]

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40020000 	.word	0x40020000
 8000354:	00f42400 	.word	0x00f42400
 8000358:	40004400 	.word	0x40004400

0800035c <uart_set_baudrate>:

static void uart_set_baudrate( USART_TypeDef *USARTx ,uint32_t PeriphClk, uint32_t BaudRate){
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
 USARTx->BRR  = compute_uart_bd(PeriphClk ,BaudRate);
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	68b8      	ldr	r0, [r7, #8]
 800036c:	f000 f808 	bl	8000380 <compute_uart_bd>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	609a      	str	r2, [r3, #8]
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
return	((PeriphClk + (BaudRate/2u))/BaudRate);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	085a      	lsrs	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	441a      	add	r2, r3
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	fbb2 f3f3 	udiv	r3, r2, r3
 8000398:	b29b      	uxth	r3, r3
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <NMI_Handler+0x4>

080003ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <HardFault_Handler+0x4>

080003b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <MemManage_Handler+0x4>

080003b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <BusFault_Handler+0x4>

080003be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <UsageFault_Handler+0x4>

080003c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f2:	f000 f8e1 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e00a      	b.n	8000422 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800040c:	f3af 8000 	nop.w
 8000410:	4601      	mov	r1, r0
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	1c5a      	adds	r2, r3, #1
 8000416:	60ba      	str	r2, [r7, #8]
 8000418:	b2ca      	uxtb	r2, r1
 800041a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	3301      	adds	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	429a      	cmp	r2, r3
 8000428:	dbf0      	blt.n	800040c <_read+0x12>
	}

return len;
 800042a:	687b      	ldr	r3, [r7, #4]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e009      	b.n	800045a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	60ba      	str	r2, [r7, #8]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff16 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3301      	adds	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	dbf1      	blt.n	8000446 <_write+0x12>
	}
	return len;
 8000462:	687b      	ldr	r3, [r7, #4]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_close>:

int _close(int file)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	return -1;
 8000474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000494:	605a      	str	r2, [r3, #4]
	return 0;
 8000496:	2300      	movs	r3, #0
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <_isatty>:

int _isatty(int file)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	return 1;
 80004ac:	2301      	movs	r3, #1
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b085      	sub	sp, #20
 80004be:	af00      	add	r7, sp, #0
 80004c0:	60f8      	str	r0, [r7, #12]
 80004c2:	60b9      	str	r1, [r7, #8]
 80004c4:	607a      	str	r2, [r7, #4]
	return 0;
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f000 f86c 	bl	80005e0 <__errno>
 8000508:	4603      	mov	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <_sbrk+0x64>)
 8000524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20020000 	.word	0x20020000
 8000534:	00000400 	.word	0x00000400
 8000538:	20000084 	.word	0x20000084
 800053c:	200000a8 	.word	0x200000a8

08000540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800059c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800056a:	490e      	ldr	r1, [pc, #56]	; (80005a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000580:	4c0b      	ldr	r4, [pc, #44]	; (80005b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800058e:	f7ff ffd7 	bl	8000540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000592:	f000 f82b 	bl	80005ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000596:	f7ff fe7f 	bl	8000298 <main>
  bx  lr    
 800059a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800059c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005a8:	080015c8 	.word	0x080015c8
  ldr r2, =_sbss
 80005ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005b0:	200000a4 	.word	0x200000a4

080005b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000090 	.word	0x20000090

080005e0 <__errno>:
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <__errno+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <__libc_init_array>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	4d0d      	ldr	r5, [pc, #52]	; (8000624 <__libc_init_array+0x38>)
 80005f0:	4c0d      	ldr	r4, [pc, #52]	; (8000628 <__libc_init_array+0x3c>)
 80005f2:	1b64      	subs	r4, r4, r5
 80005f4:	10a4      	asrs	r4, r4, #2
 80005f6:	2600      	movs	r6, #0
 80005f8:	42a6      	cmp	r6, r4
 80005fa:	d109      	bne.n	8000610 <__libc_init_array+0x24>
 80005fc:	4d0b      	ldr	r5, [pc, #44]	; (800062c <__libc_init_array+0x40>)
 80005fe:	4c0c      	ldr	r4, [pc, #48]	; (8000630 <__libc_init_array+0x44>)
 8000600:	f000 ff76 	bl	80014f0 <_init>
 8000604:	1b64      	subs	r4, r4, r5
 8000606:	10a4      	asrs	r4, r4, #2
 8000608:	2600      	movs	r6, #0
 800060a:	42a6      	cmp	r6, r4
 800060c:	d105      	bne.n	800061a <__libc_init_array+0x2e>
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f855 3b04 	ldr.w	r3, [r5], #4
 8000614:	4798      	blx	r3
 8000616:	3601      	adds	r6, #1
 8000618:	e7ee      	b.n	80005f8 <__libc_init_array+0xc>
 800061a:	f855 3b04 	ldr.w	r3, [r5], #4
 800061e:	4798      	blx	r3
 8000620:	3601      	adds	r6, #1
 8000622:	e7f2      	b.n	800060a <__libc_init_array+0x1e>
 8000624:	080015c0 	.word	0x080015c0
 8000628:	080015c0 	.word	0x080015c0
 800062c:	080015c0 	.word	0x080015c0
 8000630:	080015c4 	.word	0x080015c4

08000634 <memset>:
 8000634:	4402      	add	r2, r0
 8000636:	4603      	mov	r3, r0
 8000638:	4293      	cmp	r3, r2
 800063a:	d100      	bne.n	800063e <memset+0xa>
 800063c:	4770      	bx	lr
 800063e:	f803 1b01 	strb.w	r1, [r3], #1
 8000642:	e7f9      	b.n	8000638 <memset+0x4>

08000644 <iprintf>:
 8000644:	b40f      	push	{r0, r1, r2, r3}
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <iprintf+0x2c>)
 8000648:	b513      	push	{r0, r1, r4, lr}
 800064a:	681c      	ldr	r4, [r3, #0]
 800064c:	b124      	cbz	r4, 8000658 <iprintf+0x14>
 800064e:	69a3      	ldr	r3, [r4, #24]
 8000650:	b913      	cbnz	r3, 8000658 <iprintf+0x14>
 8000652:	4620      	mov	r0, r4
 8000654:	f000 f866 	bl	8000724 <__sinit>
 8000658:	ab05      	add	r3, sp, #20
 800065a:	9a04      	ldr	r2, [sp, #16]
 800065c:	68a1      	ldr	r1, [r4, #8]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	4620      	mov	r0, r4
 8000662:	f000 f983 	bl	800096c <_vfiprintf_r>
 8000666:	b002      	add	sp, #8
 8000668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066c:	b004      	add	sp, #16
 800066e:	4770      	bx	lr
 8000670:	20000004 	.word	0x20000004

08000674 <std>:
 8000674:	2300      	movs	r3, #0
 8000676:	b510      	push	{r4, lr}
 8000678:	4604      	mov	r4, r0
 800067a:	e9c0 3300 	strd	r3, r3, [r0]
 800067e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000682:	6083      	str	r3, [r0, #8]
 8000684:	8181      	strh	r1, [r0, #12]
 8000686:	6643      	str	r3, [r0, #100]	; 0x64
 8000688:	81c2      	strh	r2, [r0, #14]
 800068a:	6183      	str	r3, [r0, #24]
 800068c:	4619      	mov	r1, r3
 800068e:	2208      	movs	r2, #8
 8000690:	305c      	adds	r0, #92	; 0x5c
 8000692:	f7ff ffcf 	bl	8000634 <memset>
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <std+0x38>)
 8000698:	6263      	str	r3, [r4, #36]	; 0x24
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <std+0x3c>)
 800069c:	62a3      	str	r3, [r4, #40]	; 0x28
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <std+0x40>)
 80006a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <std+0x44>)
 80006a4:	6224      	str	r4, [r4, #32]
 80006a6:	6323      	str	r3, [r4, #48]	; 0x30
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	08000f15 	.word	0x08000f15
 80006b0:	08000f37 	.word	0x08000f37
 80006b4:	08000f6f 	.word	0x08000f6f
 80006b8:	08000f93 	.word	0x08000f93

080006bc <_cleanup_r>:
 80006bc:	4901      	ldr	r1, [pc, #4]	; (80006c4 <_cleanup_r+0x8>)
 80006be:	f000 b8af 	b.w	8000820 <_fwalk_reent>
 80006c2:	bf00      	nop
 80006c4:	0800126d 	.word	0x0800126d

080006c8 <__sfmoreglue>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	1e4a      	subs	r2, r1, #1
 80006cc:	2568      	movs	r5, #104	; 0x68
 80006ce:	4355      	muls	r5, r2
 80006d0:	460e      	mov	r6, r1
 80006d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80006d6:	f000 f8c5 	bl	8000864 <_malloc_r>
 80006da:	4604      	mov	r4, r0
 80006dc:	b140      	cbz	r0, 80006f0 <__sfmoreglue+0x28>
 80006de:	2100      	movs	r1, #0
 80006e0:	e9c0 1600 	strd	r1, r6, [r0]
 80006e4:	300c      	adds	r0, #12
 80006e6:	60a0      	str	r0, [r4, #8]
 80006e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80006ec:	f7ff ffa2 	bl	8000634 <memset>
 80006f0:	4620      	mov	r0, r4
 80006f2:	bd70      	pop	{r4, r5, r6, pc}

080006f4 <__sfp_lock_acquire>:
 80006f4:	4801      	ldr	r0, [pc, #4]	; (80006fc <__sfp_lock_acquire+0x8>)
 80006f6:	f000 b8b3 	b.w	8000860 <__retarget_lock_acquire_recursive>
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c

08000700 <__sfp_lock_release>:
 8000700:	4801      	ldr	r0, [pc, #4]	; (8000708 <__sfp_lock_release+0x8>)
 8000702:	f000 b8ae 	b.w	8000862 <__retarget_lock_release_recursive>
 8000706:	bf00      	nop
 8000708:	2000009c 	.word	0x2000009c

0800070c <__sinit_lock_acquire>:
 800070c:	4801      	ldr	r0, [pc, #4]	; (8000714 <__sinit_lock_acquire+0x8>)
 800070e:	f000 b8a7 	b.w	8000860 <__retarget_lock_acquire_recursive>
 8000712:	bf00      	nop
 8000714:	20000097 	.word	0x20000097

08000718 <__sinit_lock_release>:
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <__sinit_lock_release+0x8>)
 800071a:	f000 b8a2 	b.w	8000862 <__retarget_lock_release_recursive>
 800071e:	bf00      	nop
 8000720:	20000097 	.word	0x20000097

08000724 <__sinit>:
 8000724:	b510      	push	{r4, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	f7ff fff0 	bl	800070c <__sinit_lock_acquire>
 800072c:	69a3      	ldr	r3, [r4, #24]
 800072e:	b11b      	cbz	r3, 8000738 <__sinit+0x14>
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f7ff bff0 	b.w	8000718 <__sinit_lock_release>
 8000738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800073c:	6523      	str	r3, [r4, #80]	; 0x50
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <__sinit+0x68>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <__sinit+0x6c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	62a2      	str	r2, [r4, #40]	; 0x28
 8000746:	42a3      	cmp	r3, r4
 8000748:	bf04      	itt	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	61a3      	streq	r3, [r4, #24]
 800074e:	4620      	mov	r0, r4
 8000750:	f000 f820 	bl	8000794 <__sfp>
 8000754:	6060      	str	r0, [r4, #4]
 8000756:	4620      	mov	r0, r4
 8000758:	f000 f81c 	bl	8000794 <__sfp>
 800075c:	60a0      	str	r0, [r4, #8]
 800075e:	4620      	mov	r0, r4
 8000760:	f000 f818 	bl	8000794 <__sfp>
 8000764:	2200      	movs	r2, #0
 8000766:	60e0      	str	r0, [r4, #12]
 8000768:	2104      	movs	r1, #4
 800076a:	6860      	ldr	r0, [r4, #4]
 800076c:	f7ff ff82 	bl	8000674 <std>
 8000770:	68a0      	ldr	r0, [r4, #8]
 8000772:	2201      	movs	r2, #1
 8000774:	2109      	movs	r1, #9
 8000776:	f7ff ff7d 	bl	8000674 <std>
 800077a:	68e0      	ldr	r0, [r4, #12]
 800077c:	2202      	movs	r2, #2
 800077e:	2112      	movs	r1, #18
 8000780:	f7ff ff78 	bl	8000674 <std>
 8000784:	2301      	movs	r3, #1
 8000786:	61a3      	str	r3, [r4, #24]
 8000788:	e7d2      	b.n	8000730 <__sinit+0xc>
 800078a:	bf00      	nop
 800078c:	08001528 	.word	0x08001528
 8000790:	080006bd 	.word	0x080006bd

08000794 <__sfp>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	4607      	mov	r7, r0
 8000798:	f7ff ffac 	bl	80006f4 <__sfp_lock_acquire>
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <__sfp+0x84>)
 800079e:	681e      	ldr	r6, [r3, #0]
 80007a0:	69b3      	ldr	r3, [r6, #24]
 80007a2:	b913      	cbnz	r3, 80007aa <__sfp+0x16>
 80007a4:	4630      	mov	r0, r6
 80007a6:	f7ff ffbd 	bl	8000724 <__sinit>
 80007aa:	3648      	adds	r6, #72	; 0x48
 80007ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	d503      	bpl.n	80007bc <__sfp+0x28>
 80007b4:	6833      	ldr	r3, [r6, #0]
 80007b6:	b30b      	cbz	r3, 80007fc <__sfp+0x68>
 80007b8:	6836      	ldr	r6, [r6, #0]
 80007ba:	e7f7      	b.n	80007ac <__sfp+0x18>
 80007bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80007c0:	b9d5      	cbnz	r5, 80007f8 <__sfp+0x64>
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <__sfp+0x88>)
 80007c4:	60e3      	str	r3, [r4, #12]
 80007c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007ca:	6665      	str	r5, [r4, #100]	; 0x64
 80007cc:	f000 f847 	bl	800085e <__retarget_lock_init_recursive>
 80007d0:	f7ff ff96 	bl	8000700 <__sfp_lock_release>
 80007d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80007d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80007dc:	6025      	str	r5, [r4, #0]
 80007de:	61a5      	str	r5, [r4, #24]
 80007e0:	2208      	movs	r2, #8
 80007e2:	4629      	mov	r1, r5
 80007e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80007e8:	f7ff ff24 	bl	8000634 <memset>
 80007ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80007f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80007f4:	4620      	mov	r0, r4
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	3468      	adds	r4, #104	; 0x68
 80007fa:	e7d9      	b.n	80007b0 <__sfp+0x1c>
 80007fc:	2104      	movs	r1, #4
 80007fe:	4638      	mov	r0, r7
 8000800:	f7ff ff62 	bl	80006c8 <__sfmoreglue>
 8000804:	4604      	mov	r4, r0
 8000806:	6030      	str	r0, [r6, #0]
 8000808:	2800      	cmp	r0, #0
 800080a:	d1d5      	bne.n	80007b8 <__sfp+0x24>
 800080c:	f7ff ff78 	bl	8000700 <__sfp_lock_release>
 8000810:	230c      	movs	r3, #12
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	e7ee      	b.n	80007f4 <__sfp+0x60>
 8000816:	bf00      	nop
 8000818:	08001528 	.word	0x08001528
 800081c:	ffff0001 	.word	0xffff0001

08000820 <_fwalk_reent>:
 8000820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000824:	4606      	mov	r6, r0
 8000826:	4688      	mov	r8, r1
 8000828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800082c:	2700      	movs	r7, #0
 800082e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000832:	f1b9 0901 	subs.w	r9, r9, #1
 8000836:	d505      	bpl.n	8000844 <_fwalk_reent+0x24>
 8000838:	6824      	ldr	r4, [r4, #0]
 800083a:	2c00      	cmp	r4, #0
 800083c:	d1f7      	bne.n	800082e <_fwalk_reent+0xe>
 800083e:	4638      	mov	r0, r7
 8000840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000844:	89ab      	ldrh	r3, [r5, #12]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d907      	bls.n	800085a <_fwalk_reent+0x3a>
 800084a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800084e:	3301      	adds	r3, #1
 8000850:	d003      	beq.n	800085a <_fwalk_reent+0x3a>
 8000852:	4629      	mov	r1, r5
 8000854:	4630      	mov	r0, r6
 8000856:	47c0      	blx	r8
 8000858:	4307      	orrs	r7, r0
 800085a:	3568      	adds	r5, #104	; 0x68
 800085c:	e7e9      	b.n	8000832 <_fwalk_reent+0x12>

0800085e <__retarget_lock_init_recursive>:
 800085e:	4770      	bx	lr

08000860 <__retarget_lock_acquire_recursive>:
 8000860:	4770      	bx	lr

08000862 <__retarget_lock_release_recursive>:
 8000862:	4770      	bx	lr

08000864 <_malloc_r>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	1ccd      	adds	r5, r1, #3
 8000868:	f025 0503 	bic.w	r5, r5, #3
 800086c:	3508      	adds	r5, #8
 800086e:	2d0c      	cmp	r5, #12
 8000870:	bf38      	it	cc
 8000872:	250c      	movcc	r5, #12
 8000874:	2d00      	cmp	r5, #0
 8000876:	4606      	mov	r6, r0
 8000878:	db01      	blt.n	800087e <_malloc_r+0x1a>
 800087a:	42a9      	cmp	r1, r5
 800087c:	d903      	bls.n	8000886 <_malloc_r+0x22>
 800087e:	230c      	movs	r3, #12
 8000880:	6033      	str	r3, [r6, #0]
 8000882:	2000      	movs	r0, #0
 8000884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000886:	f000 fda3 	bl	80013d0 <__malloc_lock>
 800088a:	4921      	ldr	r1, [pc, #132]	; (8000910 <_malloc_r+0xac>)
 800088c:	680a      	ldr	r2, [r1, #0]
 800088e:	4614      	mov	r4, r2
 8000890:	b99c      	cbnz	r4, 80008ba <_malloc_r+0x56>
 8000892:	4f20      	ldr	r7, [pc, #128]	; (8000914 <_malloc_r+0xb0>)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b923      	cbnz	r3, 80008a2 <_malloc_r+0x3e>
 8000898:	4621      	mov	r1, r4
 800089a:	4630      	mov	r0, r6
 800089c:	f000 fb2a 	bl	8000ef4 <_sbrk_r>
 80008a0:	6038      	str	r0, [r7, #0]
 80008a2:	4629      	mov	r1, r5
 80008a4:	4630      	mov	r0, r6
 80008a6:	f000 fb25 	bl	8000ef4 <_sbrk_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	d123      	bne.n	80008f6 <_malloc_r+0x92>
 80008ae:	230c      	movs	r3, #12
 80008b0:	6033      	str	r3, [r6, #0]
 80008b2:	4630      	mov	r0, r6
 80008b4:	f000 fd92 	bl	80013dc <__malloc_unlock>
 80008b8:	e7e3      	b.n	8000882 <_malloc_r+0x1e>
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	1b5b      	subs	r3, r3, r5
 80008be:	d417      	bmi.n	80008f0 <_malloc_r+0x8c>
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	d903      	bls.n	80008cc <_malloc_r+0x68>
 80008c4:	6023      	str	r3, [r4, #0]
 80008c6:	441c      	add	r4, r3
 80008c8:	6025      	str	r5, [r4, #0]
 80008ca:	e004      	b.n	80008d6 <_malloc_r+0x72>
 80008cc:	6863      	ldr	r3, [r4, #4]
 80008ce:	42a2      	cmp	r2, r4
 80008d0:	bf0c      	ite	eq
 80008d2:	600b      	streq	r3, [r1, #0]
 80008d4:	6053      	strne	r3, [r2, #4]
 80008d6:	4630      	mov	r0, r6
 80008d8:	f000 fd80 	bl	80013dc <__malloc_unlock>
 80008dc:	f104 000b 	add.w	r0, r4, #11
 80008e0:	1d23      	adds	r3, r4, #4
 80008e2:	f020 0007 	bic.w	r0, r0, #7
 80008e6:	1ac2      	subs	r2, r0, r3
 80008e8:	d0cc      	beq.n	8000884 <_malloc_r+0x20>
 80008ea:	1a1b      	subs	r3, r3, r0
 80008ec:	50a3      	str	r3, [r4, r2]
 80008ee:	e7c9      	b.n	8000884 <_malloc_r+0x20>
 80008f0:	4622      	mov	r2, r4
 80008f2:	6864      	ldr	r4, [r4, #4]
 80008f4:	e7cc      	b.n	8000890 <_malloc_r+0x2c>
 80008f6:	1cc4      	adds	r4, r0, #3
 80008f8:	f024 0403 	bic.w	r4, r4, #3
 80008fc:	42a0      	cmp	r0, r4
 80008fe:	d0e3      	beq.n	80008c8 <_malloc_r+0x64>
 8000900:	1a21      	subs	r1, r4, r0
 8000902:	4630      	mov	r0, r6
 8000904:	f000 faf6 	bl	8000ef4 <_sbrk_r>
 8000908:	3001      	adds	r0, #1
 800090a:	d1dd      	bne.n	80008c8 <_malloc_r+0x64>
 800090c:	e7cf      	b.n	80008ae <_malloc_r+0x4a>
 800090e:	bf00      	nop
 8000910:	20000088 	.word	0x20000088
 8000914:	2000008c 	.word	0x2000008c

08000918 <__sfputc_r>:
 8000918:	6893      	ldr	r3, [r2, #8]
 800091a:	3b01      	subs	r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	b410      	push	{r4}
 8000920:	6093      	str	r3, [r2, #8]
 8000922:	da08      	bge.n	8000936 <__sfputc_r+0x1e>
 8000924:	6994      	ldr	r4, [r2, #24]
 8000926:	42a3      	cmp	r3, r4
 8000928:	db01      	blt.n	800092e <__sfputc_r+0x16>
 800092a:	290a      	cmp	r1, #10
 800092c:	d103      	bne.n	8000936 <__sfputc_r+0x1e>
 800092e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000932:	f000 bb33 	b.w	8000f9c <__swbuf_r>
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	1c58      	adds	r0, r3, #1
 800093a:	6010      	str	r0, [r2, #0]
 800093c:	7019      	strb	r1, [r3, #0]
 800093e:	4608      	mov	r0, r1
 8000940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000944:	4770      	bx	lr

08000946 <__sfputs_r>:
 8000946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000948:	4606      	mov	r6, r0
 800094a:	460f      	mov	r7, r1
 800094c:	4614      	mov	r4, r2
 800094e:	18d5      	adds	r5, r2, r3
 8000950:	42ac      	cmp	r4, r5
 8000952:	d101      	bne.n	8000958 <__sfputs_r+0x12>
 8000954:	2000      	movs	r0, #0
 8000956:	e007      	b.n	8000968 <__sfputs_r+0x22>
 8000958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800095c:	463a      	mov	r2, r7
 800095e:	4630      	mov	r0, r6
 8000960:	f7ff ffda 	bl	8000918 <__sfputc_r>
 8000964:	1c43      	adds	r3, r0, #1
 8000966:	d1f3      	bne.n	8000950 <__sfputs_r+0xa>
 8000968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800096c <_vfiprintf_r>:
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000970:	460d      	mov	r5, r1
 8000972:	b09d      	sub	sp, #116	; 0x74
 8000974:	4614      	mov	r4, r2
 8000976:	4698      	mov	r8, r3
 8000978:	4606      	mov	r6, r0
 800097a:	b118      	cbz	r0, 8000984 <_vfiprintf_r+0x18>
 800097c:	6983      	ldr	r3, [r0, #24]
 800097e:	b90b      	cbnz	r3, 8000984 <_vfiprintf_r+0x18>
 8000980:	f7ff fed0 	bl	8000724 <__sinit>
 8000984:	4b89      	ldr	r3, [pc, #548]	; (8000bac <_vfiprintf_r+0x240>)
 8000986:	429d      	cmp	r5, r3
 8000988:	d11b      	bne.n	80009c2 <_vfiprintf_r+0x56>
 800098a:	6875      	ldr	r5, [r6, #4]
 800098c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800098e:	07d9      	lsls	r1, r3, #31
 8000990:	d405      	bmi.n	800099e <_vfiprintf_r+0x32>
 8000992:	89ab      	ldrh	r3, [r5, #12]
 8000994:	059a      	lsls	r2, r3, #22
 8000996:	d402      	bmi.n	800099e <_vfiprintf_r+0x32>
 8000998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800099a:	f7ff ff61 	bl	8000860 <__retarget_lock_acquire_recursive>
 800099e:	89ab      	ldrh	r3, [r5, #12]
 80009a0:	071b      	lsls	r3, r3, #28
 80009a2:	d501      	bpl.n	80009a8 <_vfiprintf_r+0x3c>
 80009a4:	692b      	ldr	r3, [r5, #16]
 80009a6:	b9eb      	cbnz	r3, 80009e4 <_vfiprintf_r+0x78>
 80009a8:	4629      	mov	r1, r5
 80009aa:	4630      	mov	r0, r6
 80009ac:	f000 fb5a 	bl	8001064 <__swsetup_r>
 80009b0:	b1c0      	cbz	r0, 80009e4 <_vfiprintf_r+0x78>
 80009b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009b4:	07dc      	lsls	r4, r3, #31
 80009b6:	d50e      	bpl.n	80009d6 <_vfiprintf_r+0x6a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	b01d      	add	sp, #116	; 0x74
 80009be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c2:	4b7b      	ldr	r3, [pc, #492]	; (8000bb0 <_vfiprintf_r+0x244>)
 80009c4:	429d      	cmp	r5, r3
 80009c6:	d101      	bne.n	80009cc <_vfiprintf_r+0x60>
 80009c8:	68b5      	ldr	r5, [r6, #8]
 80009ca:	e7df      	b.n	800098c <_vfiprintf_r+0x20>
 80009cc:	4b79      	ldr	r3, [pc, #484]	; (8000bb4 <_vfiprintf_r+0x248>)
 80009ce:	429d      	cmp	r5, r3
 80009d0:	bf08      	it	eq
 80009d2:	68f5      	ldreq	r5, [r6, #12]
 80009d4:	e7da      	b.n	800098c <_vfiprintf_r+0x20>
 80009d6:	89ab      	ldrh	r3, [r5, #12]
 80009d8:	0598      	lsls	r0, r3, #22
 80009da:	d4ed      	bmi.n	80009b8 <_vfiprintf_r+0x4c>
 80009dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009de:	f7ff ff40 	bl	8000862 <__retarget_lock_release_recursive>
 80009e2:	e7e9      	b.n	80009b8 <_vfiprintf_r+0x4c>
 80009e4:	2300      	movs	r3, #0
 80009e6:	9309      	str	r3, [sp, #36]	; 0x24
 80009e8:	2320      	movs	r3, #32
 80009ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80009f2:	2330      	movs	r3, #48	; 0x30
 80009f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000bb8 <_vfiprintf_r+0x24c>
 80009f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009fc:	f04f 0901 	mov.w	r9, #1
 8000a00:	4623      	mov	r3, r4
 8000a02:	469a      	mov	sl, r3
 8000a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a08:	b10a      	cbz	r2, 8000a0e <_vfiprintf_r+0xa2>
 8000a0a:	2a25      	cmp	r2, #37	; 0x25
 8000a0c:	d1f9      	bne.n	8000a02 <_vfiprintf_r+0x96>
 8000a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a12:	d00b      	beq.n	8000a2c <_vfiprintf_r+0xc0>
 8000a14:	465b      	mov	r3, fp
 8000a16:	4622      	mov	r2, r4
 8000a18:	4629      	mov	r1, r5
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f7ff ff93 	bl	8000946 <__sfputs_r>
 8000a20:	3001      	adds	r0, #1
 8000a22:	f000 80aa 	beq.w	8000b7a <_vfiprintf_r+0x20e>
 8000a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a28:	445a      	add	r2, fp
 8000a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f000 80a2 	beq.w	8000b7a <_vfiprintf_r+0x20e>
 8000a36:	2300      	movs	r3, #0
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a40:	f10a 0a01 	add.w	sl, sl, #1
 8000a44:	9304      	str	r3, [sp, #16]
 8000a46:	9307      	str	r3, [sp, #28]
 8000a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8000a4e:	4654      	mov	r4, sl
 8000a50:	2205      	movs	r2, #5
 8000a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a56:	4858      	ldr	r0, [pc, #352]	; (8000bb8 <_vfiprintf_r+0x24c>)
 8000a58:	f7ff fbc2 	bl	80001e0 <memchr>
 8000a5c:	9a04      	ldr	r2, [sp, #16]
 8000a5e:	b9d8      	cbnz	r0, 8000a98 <_vfiprintf_r+0x12c>
 8000a60:	06d1      	lsls	r1, r2, #27
 8000a62:	bf44      	itt	mi
 8000a64:	2320      	movmi	r3, #32
 8000a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a6a:	0713      	lsls	r3, r2, #28
 8000a6c:	bf44      	itt	mi
 8000a6e:	232b      	movmi	r3, #43	; 0x2b
 8000a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a74:	f89a 3000 	ldrb.w	r3, [sl]
 8000a78:	2b2a      	cmp	r3, #42	; 0x2a
 8000a7a:	d015      	beq.n	8000aa8 <_vfiprintf_r+0x13c>
 8000a7c:	9a07      	ldr	r2, [sp, #28]
 8000a7e:	4654      	mov	r4, sl
 8000a80:	2000      	movs	r0, #0
 8000a82:	f04f 0c0a 	mov.w	ip, #10
 8000a86:	4621      	mov	r1, r4
 8000a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a8c:	3b30      	subs	r3, #48	; 0x30
 8000a8e:	2b09      	cmp	r3, #9
 8000a90:	d94e      	bls.n	8000b30 <_vfiprintf_r+0x1c4>
 8000a92:	b1b0      	cbz	r0, 8000ac2 <_vfiprintf_r+0x156>
 8000a94:	9207      	str	r2, [sp, #28]
 8000a96:	e014      	b.n	8000ac2 <_vfiprintf_r+0x156>
 8000a98:	eba0 0308 	sub.w	r3, r0, r8
 8000a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	9304      	str	r3, [sp, #16]
 8000aa4:	46a2      	mov	sl, r4
 8000aa6:	e7d2      	b.n	8000a4e <_vfiprintf_r+0xe2>
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	1d19      	adds	r1, r3, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	9103      	str	r1, [sp, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bfbb      	ittet	lt
 8000ab4:	425b      	neglt	r3, r3
 8000ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8000aba:	9307      	strge	r3, [sp, #28]
 8000abc:	9307      	strlt	r3, [sp, #28]
 8000abe:	bfb8      	it	lt
 8000ac0:	9204      	strlt	r2, [sp, #16]
 8000ac2:	7823      	ldrb	r3, [r4, #0]
 8000ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ac6:	d10c      	bne.n	8000ae2 <_vfiprintf_r+0x176>
 8000ac8:	7863      	ldrb	r3, [r4, #1]
 8000aca:	2b2a      	cmp	r3, #42	; 0x2a
 8000acc:	d135      	bne.n	8000b3a <_vfiprintf_r+0x1ce>
 8000ace:	9b03      	ldr	r3, [sp, #12]
 8000ad0:	1d1a      	adds	r2, r3, #4
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	9203      	str	r2, [sp, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bfb8      	it	lt
 8000ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ade:	3402      	adds	r4, #2
 8000ae0:	9305      	str	r3, [sp, #20]
 8000ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000bc8 <_vfiprintf_r+0x25c>
 8000ae6:	7821      	ldrb	r1, [r4, #0]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4650      	mov	r0, sl
 8000aec:	f7ff fb78 	bl	80001e0 <memchr>
 8000af0:	b140      	cbz	r0, 8000b04 <_vfiprintf_r+0x198>
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	eba0 000a 	sub.w	r0, r0, sl
 8000af8:	fa03 f000 	lsl.w	r0, r3, r0
 8000afc:	9b04      	ldr	r3, [sp, #16]
 8000afe:	4303      	orrs	r3, r0
 8000b00:	3401      	adds	r4, #1
 8000b02:	9304      	str	r3, [sp, #16]
 8000b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b08:	482c      	ldr	r0, [pc, #176]	; (8000bbc <_vfiprintf_r+0x250>)
 8000b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b0e:	2206      	movs	r2, #6
 8000b10:	f7ff fb66 	bl	80001e0 <memchr>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d03f      	beq.n	8000b98 <_vfiprintf_r+0x22c>
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <_vfiprintf_r+0x254>)
 8000b1a:	bb1b      	cbnz	r3, 8000b64 <_vfiprintf_r+0x1f8>
 8000b1c:	9b03      	ldr	r3, [sp, #12]
 8000b1e:	3307      	adds	r3, #7
 8000b20:	f023 0307 	bic.w	r3, r3, #7
 8000b24:	3308      	adds	r3, #8
 8000b26:	9303      	str	r3, [sp, #12]
 8000b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b2a:	443b      	add	r3, r7
 8000b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b2e:	e767      	b.n	8000a00 <_vfiprintf_r+0x94>
 8000b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b34:	460c      	mov	r4, r1
 8000b36:	2001      	movs	r0, #1
 8000b38:	e7a5      	b.n	8000a86 <_vfiprintf_r+0x11a>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	3401      	adds	r4, #1
 8000b3e:	9305      	str	r3, [sp, #20]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 0c0a 	mov.w	ip, #10
 8000b46:	4620      	mov	r0, r4
 8000b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b4c:	3a30      	subs	r2, #48	; 0x30
 8000b4e:	2a09      	cmp	r2, #9
 8000b50:	d903      	bls.n	8000b5a <_vfiprintf_r+0x1ee>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0c5      	beq.n	8000ae2 <_vfiprintf_r+0x176>
 8000b56:	9105      	str	r1, [sp, #20]
 8000b58:	e7c3      	b.n	8000ae2 <_vfiprintf_r+0x176>
 8000b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b5e:	4604      	mov	r4, r0
 8000b60:	2301      	movs	r3, #1
 8000b62:	e7f0      	b.n	8000b46 <_vfiprintf_r+0x1da>
 8000b64:	ab03      	add	r3, sp, #12
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	462a      	mov	r2, r5
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <_vfiprintf_r+0x258>)
 8000b6c:	a904      	add	r1, sp, #16
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f3af 8000 	nop.w
 8000b74:	4607      	mov	r7, r0
 8000b76:	1c78      	adds	r0, r7, #1
 8000b78:	d1d6      	bne.n	8000b28 <_vfiprintf_r+0x1bc>
 8000b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7c:	07d9      	lsls	r1, r3, #31
 8000b7e:	d405      	bmi.n	8000b8c <_vfiprintf_r+0x220>
 8000b80:	89ab      	ldrh	r3, [r5, #12]
 8000b82:	059a      	lsls	r2, r3, #22
 8000b84:	d402      	bmi.n	8000b8c <_vfiprintf_r+0x220>
 8000b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b88:	f7ff fe6b 	bl	8000862 <__retarget_lock_release_recursive>
 8000b8c:	89ab      	ldrh	r3, [r5, #12]
 8000b8e:	065b      	lsls	r3, r3, #25
 8000b90:	f53f af12 	bmi.w	80009b8 <_vfiprintf_r+0x4c>
 8000b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b96:	e711      	b.n	80009bc <_vfiprintf_r+0x50>
 8000b98:	ab03      	add	r3, sp, #12
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	462a      	mov	r2, r5
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <_vfiprintf_r+0x258>)
 8000ba0:	a904      	add	r1, sp, #16
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f000 f880 	bl	8000ca8 <_printf_i>
 8000ba8:	e7e4      	b.n	8000b74 <_vfiprintf_r+0x208>
 8000baa:	bf00      	nop
 8000bac:	0800154c 	.word	0x0800154c
 8000bb0:	0800156c 	.word	0x0800156c
 8000bb4:	0800152c 	.word	0x0800152c
 8000bb8:	0800158c 	.word	0x0800158c
 8000bbc:	08001596 	.word	0x08001596
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	08000947 	.word	0x08000947
 8000bc8:	08001592 	.word	0x08001592

08000bcc <_printf_common>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	4616      	mov	r6, r2
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	688a      	ldr	r2, [r1, #8]
 8000bd6:	690b      	ldr	r3, [r1, #16]
 8000bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	bfb8      	it	lt
 8000be0:	4613      	movlt	r3, r2
 8000be2:	6033      	str	r3, [r6, #0]
 8000be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000be8:	4607      	mov	r7, r0
 8000bea:	460c      	mov	r4, r1
 8000bec:	b10a      	cbz	r2, 8000bf2 <_printf_common+0x26>
 8000bee:	3301      	adds	r3, #1
 8000bf0:	6033      	str	r3, [r6, #0]
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	0699      	lsls	r1, r3, #26
 8000bf6:	bf42      	ittt	mi
 8000bf8:	6833      	ldrmi	r3, [r6, #0]
 8000bfa:	3302      	addmi	r3, #2
 8000bfc:	6033      	strmi	r3, [r6, #0]
 8000bfe:	6825      	ldr	r5, [r4, #0]
 8000c00:	f015 0506 	ands.w	r5, r5, #6
 8000c04:	d106      	bne.n	8000c14 <_printf_common+0x48>
 8000c06:	f104 0a19 	add.w	sl, r4, #25
 8000c0a:	68e3      	ldr	r3, [r4, #12]
 8000c0c:	6832      	ldr	r2, [r6, #0]
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	dc26      	bgt.n	8000c62 <_printf_common+0x96>
 8000c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c18:	1e13      	subs	r3, r2, #0
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	bf18      	it	ne
 8000c1e:	2301      	movne	r3, #1
 8000c20:	0692      	lsls	r2, r2, #26
 8000c22:	d42b      	bmi.n	8000c7c <_printf_common+0xb0>
 8000c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c28:	4649      	mov	r1, r9
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	47c0      	blx	r8
 8000c2e:	3001      	adds	r0, #1
 8000c30:	d01e      	beq.n	8000c70 <_printf_common+0xa4>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	68e5      	ldr	r5, [r4, #12]
 8000c36:	6832      	ldr	r2, [r6, #0]
 8000c38:	f003 0306 	and.w	r3, r3, #6
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	bf08      	it	eq
 8000c40:	1aad      	subeq	r5, r5, r2
 8000c42:	68a3      	ldr	r3, [r4, #8]
 8000c44:	6922      	ldr	r2, [r4, #16]
 8000c46:	bf0c      	ite	eq
 8000c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c4c:	2500      	movne	r5, #0
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	bfc4      	itt	gt
 8000c52:	1a9b      	subgt	r3, r3, r2
 8000c54:	18ed      	addgt	r5, r5, r3
 8000c56:	2600      	movs	r6, #0
 8000c58:	341a      	adds	r4, #26
 8000c5a:	42b5      	cmp	r5, r6
 8000c5c:	d11a      	bne.n	8000c94 <_printf_common+0xc8>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e008      	b.n	8000c74 <_printf_common+0xa8>
 8000c62:	2301      	movs	r3, #1
 8000c64:	4652      	mov	r2, sl
 8000c66:	4649      	mov	r1, r9
 8000c68:	4638      	mov	r0, r7
 8000c6a:	47c0      	blx	r8
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	d103      	bne.n	8000c78 <_printf_common+0xac>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	3501      	adds	r5, #1
 8000c7a:	e7c6      	b.n	8000c0a <_printf_common+0x3e>
 8000c7c:	18e1      	adds	r1, r4, r3
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	2030      	movs	r0, #48	; 0x30
 8000c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c86:	4422      	add	r2, r4
 8000c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c90:	3302      	adds	r3, #2
 8000c92:	e7c7      	b.n	8000c24 <_printf_common+0x58>
 8000c94:	2301      	movs	r3, #1
 8000c96:	4622      	mov	r2, r4
 8000c98:	4649      	mov	r1, r9
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	47c0      	blx	r8
 8000c9e:	3001      	adds	r0, #1
 8000ca0:	d0e6      	beq.n	8000c70 <_printf_common+0xa4>
 8000ca2:	3601      	adds	r6, #1
 8000ca4:	e7d9      	b.n	8000c5a <_printf_common+0x8e>
	...

08000ca8 <_printf_i>:
 8000ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	460c      	mov	r4, r1
 8000cae:	4691      	mov	r9, r2
 8000cb0:	7e27      	ldrb	r7, [r4, #24]
 8000cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cb4:	2f78      	cmp	r7, #120	; 0x78
 8000cb6:	4680      	mov	r8, r0
 8000cb8:	469a      	mov	sl, r3
 8000cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cbe:	d807      	bhi.n	8000cd0 <_printf_i+0x28>
 8000cc0:	2f62      	cmp	r7, #98	; 0x62
 8000cc2:	d80a      	bhi.n	8000cda <_printf_i+0x32>
 8000cc4:	2f00      	cmp	r7, #0
 8000cc6:	f000 80d8 	beq.w	8000e7a <_printf_i+0x1d2>
 8000cca:	2f58      	cmp	r7, #88	; 0x58
 8000ccc:	f000 80a3 	beq.w	8000e16 <_printf_i+0x16e>
 8000cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000cd8:	e03a      	b.n	8000d50 <_printf_i+0xa8>
 8000cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000cde:	2b15      	cmp	r3, #21
 8000ce0:	d8f6      	bhi.n	8000cd0 <_printf_i+0x28>
 8000ce2:	a001      	add	r0, pc, #4	; (adr r0, 8000ce8 <_printf_i+0x40>)
 8000ce4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000ce8:	08000d41 	.word	0x08000d41
 8000cec:	08000d55 	.word	0x08000d55
 8000cf0:	08000cd1 	.word	0x08000cd1
 8000cf4:	08000cd1 	.word	0x08000cd1
 8000cf8:	08000cd1 	.word	0x08000cd1
 8000cfc:	08000cd1 	.word	0x08000cd1
 8000d00:	08000d55 	.word	0x08000d55
 8000d04:	08000cd1 	.word	0x08000cd1
 8000d08:	08000cd1 	.word	0x08000cd1
 8000d0c:	08000cd1 	.word	0x08000cd1
 8000d10:	08000cd1 	.word	0x08000cd1
 8000d14:	08000e61 	.word	0x08000e61
 8000d18:	08000d85 	.word	0x08000d85
 8000d1c:	08000e43 	.word	0x08000e43
 8000d20:	08000cd1 	.word	0x08000cd1
 8000d24:	08000cd1 	.word	0x08000cd1
 8000d28:	08000e83 	.word	0x08000e83
 8000d2c:	08000cd1 	.word	0x08000cd1
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000cd1 	.word	0x08000cd1
 8000d38:	08000cd1 	.word	0x08000cd1
 8000d3c:	08000e4b 	.word	0x08000e4b
 8000d40:	680b      	ldr	r3, [r1, #0]
 8000d42:	1d1a      	adds	r2, r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	600a      	str	r2, [r1, #0]
 8000d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0a3      	b.n	8000e9c <_printf_i+0x1f4>
 8000d54:	6825      	ldr	r5, [r4, #0]
 8000d56:	6808      	ldr	r0, [r1, #0]
 8000d58:	062e      	lsls	r6, r5, #24
 8000d5a:	f100 0304 	add.w	r3, r0, #4
 8000d5e:	d50a      	bpl.n	8000d76 <_printf_i+0xce>
 8000d60:	6805      	ldr	r5, [r0, #0]
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	da03      	bge.n	8000d70 <_printf_i+0xc8>
 8000d68:	232d      	movs	r3, #45	; 0x2d
 8000d6a:	426d      	negs	r5, r5
 8000d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d70:	485e      	ldr	r0, [pc, #376]	; (8000eec <_printf_i+0x244>)
 8000d72:	230a      	movs	r3, #10
 8000d74:	e019      	b.n	8000daa <_printf_i+0x102>
 8000d76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000d7a:	6805      	ldr	r5, [r0, #0]
 8000d7c:	600b      	str	r3, [r1, #0]
 8000d7e:	bf18      	it	ne
 8000d80:	b22d      	sxthne	r5, r5
 8000d82:	e7ef      	b.n	8000d64 <_printf_i+0xbc>
 8000d84:	680b      	ldr	r3, [r1, #0]
 8000d86:	6825      	ldr	r5, [r4, #0]
 8000d88:	1d18      	adds	r0, r3, #4
 8000d8a:	6008      	str	r0, [r1, #0]
 8000d8c:	0628      	lsls	r0, r5, #24
 8000d8e:	d501      	bpl.n	8000d94 <_printf_i+0xec>
 8000d90:	681d      	ldr	r5, [r3, #0]
 8000d92:	e002      	b.n	8000d9a <_printf_i+0xf2>
 8000d94:	0669      	lsls	r1, r5, #25
 8000d96:	d5fb      	bpl.n	8000d90 <_printf_i+0xe8>
 8000d98:	881d      	ldrh	r5, [r3, #0]
 8000d9a:	4854      	ldr	r0, [pc, #336]	; (8000eec <_printf_i+0x244>)
 8000d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8000d9e:	bf0c      	ite	eq
 8000da0:	2308      	moveq	r3, #8
 8000da2:	230a      	movne	r3, #10
 8000da4:	2100      	movs	r1, #0
 8000da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000daa:	6866      	ldr	r6, [r4, #4]
 8000dac:	60a6      	str	r6, [r4, #8]
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	bfa2      	ittt	ge
 8000db2:	6821      	ldrge	r1, [r4, #0]
 8000db4:	f021 0104 	bicge.w	r1, r1, #4
 8000db8:	6021      	strge	r1, [r4, #0]
 8000dba:	b90d      	cbnz	r5, 8000dc0 <_printf_i+0x118>
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d04d      	beq.n	8000e5c <_printf_i+0x1b4>
 8000dc0:	4616      	mov	r6, r2
 8000dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8000dca:	5dc7      	ldrb	r7, [r0, r7]
 8000dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000dd0:	462f      	mov	r7, r5
 8000dd2:	42bb      	cmp	r3, r7
 8000dd4:	460d      	mov	r5, r1
 8000dd6:	d9f4      	bls.n	8000dc2 <_printf_i+0x11a>
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d10b      	bne.n	8000df4 <_printf_i+0x14c>
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	07df      	lsls	r7, r3, #31
 8000de0:	d508      	bpl.n	8000df4 <_printf_i+0x14c>
 8000de2:	6923      	ldr	r3, [r4, #16]
 8000de4:	6861      	ldr	r1, [r4, #4]
 8000de6:	4299      	cmp	r1, r3
 8000de8:	bfde      	ittt	le
 8000dea:	2330      	movle	r3, #48	; 0x30
 8000dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000df4:	1b92      	subs	r2, r2, r6
 8000df6:	6122      	str	r2, [r4, #16]
 8000df8:	f8cd a000 	str.w	sl, [sp]
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	aa03      	add	r2, sp, #12
 8000e00:	4621      	mov	r1, r4
 8000e02:	4640      	mov	r0, r8
 8000e04:	f7ff fee2 	bl	8000bcc <_printf_common>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	d14c      	bne.n	8000ea6 <_printf_i+0x1fe>
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	b004      	add	sp, #16
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	4835      	ldr	r0, [pc, #212]	; (8000eec <_printf_i+0x244>)
 8000e18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	680e      	ldr	r6, [r1, #0]
 8000e20:	061f      	lsls	r7, r3, #24
 8000e22:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e26:	600e      	str	r6, [r1, #0]
 8000e28:	d514      	bpl.n	8000e54 <_printf_i+0x1ac>
 8000e2a:	07d9      	lsls	r1, r3, #31
 8000e2c:	bf44      	itt	mi
 8000e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8000e32:	6023      	strmi	r3, [r4, #0]
 8000e34:	b91d      	cbnz	r5, 8000e3e <_printf_i+0x196>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	f023 0320 	bic.w	r3, r3, #32
 8000e3c:	6023      	str	r3, [r4, #0]
 8000e3e:	2310      	movs	r3, #16
 8000e40:	e7b0      	b.n	8000da4 <_printf_i+0xfc>
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	2378      	movs	r3, #120	; 0x78
 8000e4c:	4828      	ldr	r0, [pc, #160]	; (8000ef0 <_printf_i+0x248>)
 8000e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e52:	e7e3      	b.n	8000e1c <_printf_i+0x174>
 8000e54:	065e      	lsls	r6, r3, #25
 8000e56:	bf48      	it	mi
 8000e58:	b2ad      	uxthmi	r5, r5
 8000e5a:	e7e6      	b.n	8000e2a <_printf_i+0x182>
 8000e5c:	4616      	mov	r6, r2
 8000e5e:	e7bb      	b.n	8000dd8 <_printf_i+0x130>
 8000e60:	680b      	ldr	r3, [r1, #0]
 8000e62:	6826      	ldr	r6, [r4, #0]
 8000e64:	6960      	ldr	r0, [r4, #20]
 8000e66:	1d1d      	adds	r5, r3, #4
 8000e68:	600d      	str	r5, [r1, #0]
 8000e6a:	0635      	lsls	r5, r6, #24
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	d501      	bpl.n	8000e74 <_printf_i+0x1cc>
 8000e70:	6018      	str	r0, [r3, #0]
 8000e72:	e002      	b.n	8000e7a <_printf_i+0x1d2>
 8000e74:	0671      	lsls	r1, r6, #25
 8000e76:	d5fb      	bpl.n	8000e70 <_printf_i+0x1c8>
 8000e78:	8018      	strh	r0, [r3, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	6123      	str	r3, [r4, #16]
 8000e7e:	4616      	mov	r6, r2
 8000e80:	e7ba      	b.n	8000df8 <_printf_i+0x150>
 8000e82:	680b      	ldr	r3, [r1, #0]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	600a      	str	r2, [r1, #0]
 8000e88:	681e      	ldr	r6, [r3, #0]
 8000e8a:	6862      	ldr	r2, [r4, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f7ff f9a6 	bl	80001e0 <memchr>
 8000e94:	b108      	cbz	r0, 8000e9a <_printf_i+0x1f2>
 8000e96:	1b80      	subs	r0, r0, r6
 8000e98:	6060      	str	r0, [r4, #4]
 8000e9a:	6863      	ldr	r3, [r4, #4]
 8000e9c:	6123      	str	r3, [r4, #16]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ea4:	e7a8      	b.n	8000df8 <_printf_i+0x150>
 8000ea6:	6923      	ldr	r3, [r4, #16]
 8000ea8:	4632      	mov	r2, r6
 8000eaa:	4649      	mov	r1, r9
 8000eac:	4640      	mov	r0, r8
 8000eae:	47d0      	blx	sl
 8000eb0:	3001      	adds	r0, #1
 8000eb2:	d0ab      	beq.n	8000e0c <_printf_i+0x164>
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	079b      	lsls	r3, r3, #30
 8000eb8:	d413      	bmi.n	8000ee2 <_printf_i+0x23a>
 8000eba:	68e0      	ldr	r0, [r4, #12]
 8000ebc:	9b03      	ldr	r3, [sp, #12]
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	bfb8      	it	lt
 8000ec2:	4618      	movlt	r0, r3
 8000ec4:	e7a4      	b.n	8000e10 <_printf_i+0x168>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4632      	mov	r2, r6
 8000eca:	4649      	mov	r1, r9
 8000ecc:	4640      	mov	r0, r8
 8000ece:	47d0      	blx	sl
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	d09b      	beq.n	8000e0c <_printf_i+0x164>
 8000ed4:	3501      	adds	r5, #1
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	9903      	ldr	r1, [sp, #12]
 8000eda:	1a5b      	subs	r3, r3, r1
 8000edc:	42ab      	cmp	r3, r5
 8000ede:	dcf2      	bgt.n	8000ec6 <_printf_i+0x21e>
 8000ee0:	e7eb      	b.n	8000eba <_printf_i+0x212>
 8000ee2:	2500      	movs	r5, #0
 8000ee4:	f104 0619 	add.w	r6, r4, #25
 8000ee8:	e7f5      	b.n	8000ed6 <_printf_i+0x22e>
 8000eea:	bf00      	nop
 8000eec:	0800159d 	.word	0x0800159d
 8000ef0:	080015ae 	.word	0x080015ae

08000ef4 <_sbrk_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d06      	ldr	r5, [pc, #24]	; (8000f10 <_sbrk_r+0x1c>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	602b      	str	r3, [r5, #0]
 8000f00:	f7ff fae8 	bl	80004d4 <_sbrk>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_sbrk_r+0x1a>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_sbrk_r+0x1a>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	200000a0 	.word	0x200000a0

08000f14 <__sread>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	460c      	mov	r4, r1
 8000f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1c:	f000 fab4 	bl	8001488 <_read_r>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	bfab      	itete	ge
 8000f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f26:	89a3      	ldrhlt	r3, [r4, #12]
 8000f28:	181b      	addge	r3, r3, r0
 8000f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f2e:	bfac      	ite	ge
 8000f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f32:	81a3      	strhlt	r3, [r4, #12]
 8000f34:	bd10      	pop	{r4, pc}

08000f36 <__swrite>:
 8000f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f3a:	461f      	mov	r7, r3
 8000f3c:	898b      	ldrh	r3, [r1, #12]
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	4605      	mov	r5, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	4616      	mov	r6, r2
 8000f46:	d505      	bpl.n	8000f54 <__swrite+0x1e>
 8000f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f000 f9c8 	bl	80012e4 <_lseek_r>
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f5e:	81a3      	strh	r3, [r4, #12]
 8000f60:	4632      	mov	r2, r6
 8000f62:	463b      	mov	r3, r7
 8000f64:	4628      	mov	r0, r5
 8000f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6a:	f000 b869 	b.w	8001040 <_write_r>

08000f6e <__sseek>:
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	460c      	mov	r4, r1
 8000f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f76:	f000 f9b5 	bl	80012e4 <_lseek_r>
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	bf15      	itete	ne
 8000f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f8a:	81a3      	strheq	r3, [r4, #12]
 8000f8c:	bf18      	it	ne
 8000f8e:	81a3      	strhne	r3, [r4, #12]
 8000f90:	bd10      	pop	{r4, pc}

08000f92 <__sclose>:
 8000f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f96:	f000 b8d3 	b.w	8001140 <_close_r>
	...

08000f9c <__swbuf_r>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	460e      	mov	r6, r1
 8000fa0:	4614      	mov	r4, r2
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	b118      	cbz	r0, 8000fae <__swbuf_r+0x12>
 8000fa6:	6983      	ldr	r3, [r0, #24]
 8000fa8:	b90b      	cbnz	r3, 8000fae <__swbuf_r+0x12>
 8000faa:	f7ff fbbb 	bl	8000724 <__sinit>
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <__swbuf_r+0x98>)
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d12b      	bne.n	800100c <__swbuf_r+0x70>
 8000fb4:	686c      	ldr	r4, [r5, #4]
 8000fb6:	69a3      	ldr	r3, [r4, #24]
 8000fb8:	60a3      	str	r3, [r4, #8]
 8000fba:	89a3      	ldrh	r3, [r4, #12]
 8000fbc:	071a      	lsls	r2, r3, #28
 8000fbe:	d52f      	bpl.n	8001020 <__swbuf_r+0x84>
 8000fc0:	6923      	ldr	r3, [r4, #16]
 8000fc2:	b36b      	cbz	r3, 8001020 <__swbuf_r+0x84>
 8000fc4:	6923      	ldr	r3, [r4, #16]
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	1ac0      	subs	r0, r0, r3
 8000fca:	6963      	ldr	r3, [r4, #20]
 8000fcc:	b2f6      	uxtb	r6, r6
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	dc04      	bgt.n	8000fde <__swbuf_r+0x42>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f000 f948 	bl	800126c <_fflush_r>
 8000fdc:	bb30      	cbnz	r0, 800102c <__swbuf_r+0x90>
 8000fde:	68a3      	ldr	r3, [r4, #8]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60a3      	str	r3, [r4, #8]
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	6022      	str	r2, [r4, #0]
 8000fea:	701e      	strb	r6, [r3, #0]
 8000fec:	6963      	ldr	r3, [r4, #20]
 8000fee:	3001      	adds	r0, #1
 8000ff0:	4283      	cmp	r3, r0
 8000ff2:	d004      	beq.n	8000ffe <__swbuf_r+0x62>
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	07db      	lsls	r3, r3, #31
 8000ff8:	d506      	bpl.n	8001008 <__swbuf_r+0x6c>
 8000ffa:	2e0a      	cmp	r6, #10
 8000ffc:	d104      	bne.n	8001008 <__swbuf_r+0x6c>
 8000ffe:	4621      	mov	r1, r4
 8001000:	4628      	mov	r0, r5
 8001002:	f000 f933 	bl	800126c <_fflush_r>
 8001006:	b988      	cbnz	r0, 800102c <__swbuf_r+0x90>
 8001008:	4638      	mov	r0, r7
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <__swbuf_r+0x9c>)
 800100e:	429c      	cmp	r4, r3
 8001010:	d101      	bne.n	8001016 <__swbuf_r+0x7a>
 8001012:	68ac      	ldr	r4, [r5, #8]
 8001014:	e7cf      	b.n	8000fb6 <__swbuf_r+0x1a>
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <__swbuf_r+0xa0>)
 8001018:	429c      	cmp	r4, r3
 800101a:	bf08      	it	eq
 800101c:	68ec      	ldreq	r4, [r5, #12]
 800101e:	e7ca      	b.n	8000fb6 <__swbuf_r+0x1a>
 8001020:	4621      	mov	r1, r4
 8001022:	4628      	mov	r0, r5
 8001024:	f000 f81e 	bl	8001064 <__swsetup_r>
 8001028:	2800      	cmp	r0, #0
 800102a:	d0cb      	beq.n	8000fc4 <__swbuf_r+0x28>
 800102c:	f04f 37ff 	mov.w	r7, #4294967295
 8001030:	e7ea      	b.n	8001008 <__swbuf_r+0x6c>
 8001032:	bf00      	nop
 8001034:	0800154c 	.word	0x0800154c
 8001038:	0800156c 	.word	0x0800156c
 800103c:	0800152c 	.word	0x0800152c

08001040 <_write_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d07      	ldr	r5, [pc, #28]	; (8001060 <_write_r+0x20>)
 8001044:	4604      	mov	r4, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	2200      	movs	r2, #0
 800104c:	602a      	str	r2, [r5, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f7ff f9f0 	bl	8000434 <_write>
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	d102      	bne.n	800105e <_write_r+0x1e>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	b103      	cbz	r3, 800105e <_write_r+0x1e>
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	bd38      	pop	{r3, r4, r5, pc}
 8001060:	200000a0 	.word	0x200000a0

08001064 <__swsetup_r>:
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <__swsetup_r+0xcc>)
 8001066:	b570      	push	{r4, r5, r6, lr}
 8001068:	681d      	ldr	r5, [r3, #0]
 800106a:	4606      	mov	r6, r0
 800106c:	460c      	mov	r4, r1
 800106e:	b125      	cbz	r5, 800107a <__swsetup_r+0x16>
 8001070:	69ab      	ldr	r3, [r5, #24]
 8001072:	b913      	cbnz	r3, 800107a <__swsetup_r+0x16>
 8001074:	4628      	mov	r0, r5
 8001076:	f7ff fb55 	bl	8000724 <__sinit>
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <__swsetup_r+0xd0>)
 800107c:	429c      	cmp	r4, r3
 800107e:	d10f      	bne.n	80010a0 <__swsetup_r+0x3c>
 8001080:	686c      	ldr	r4, [r5, #4]
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001088:	0719      	lsls	r1, r3, #28
 800108a:	d42c      	bmi.n	80010e6 <__swsetup_r+0x82>
 800108c:	06dd      	lsls	r5, r3, #27
 800108e:	d411      	bmi.n	80010b4 <__swsetup_r+0x50>
 8001090:	2309      	movs	r3, #9
 8001092:	6033      	str	r3, [r6, #0]
 8001094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001098:	81a3      	strh	r3, [r4, #12]
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	e03e      	b.n	800111e <__swsetup_r+0xba>
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <__swsetup_r+0xd4>)
 80010a2:	429c      	cmp	r4, r3
 80010a4:	d101      	bne.n	80010aa <__swsetup_r+0x46>
 80010a6:	68ac      	ldr	r4, [r5, #8]
 80010a8:	e7eb      	b.n	8001082 <__swsetup_r+0x1e>
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <__swsetup_r+0xd8>)
 80010ac:	429c      	cmp	r4, r3
 80010ae:	bf08      	it	eq
 80010b0:	68ec      	ldreq	r4, [r5, #12]
 80010b2:	e7e6      	b.n	8001082 <__swsetup_r+0x1e>
 80010b4:	0758      	lsls	r0, r3, #29
 80010b6:	d512      	bpl.n	80010de <__swsetup_r+0x7a>
 80010b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ba:	b141      	cbz	r1, 80010ce <__swsetup_r+0x6a>
 80010bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d002      	beq.n	80010ca <__swsetup_r+0x66>
 80010c4:	4630      	mov	r0, r6
 80010c6:	f000 f98f 	bl	80013e8 <_free_r>
 80010ca:	2300      	movs	r3, #0
 80010cc:	6363      	str	r3, [r4, #52]	; 0x34
 80010ce:	89a3      	ldrh	r3, [r4, #12]
 80010d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80010d4:	81a3      	strh	r3, [r4, #12]
 80010d6:	2300      	movs	r3, #0
 80010d8:	6063      	str	r3, [r4, #4]
 80010da:	6923      	ldr	r3, [r4, #16]
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	81a3      	strh	r3, [r4, #12]
 80010e6:	6923      	ldr	r3, [r4, #16]
 80010e8:	b94b      	cbnz	r3, 80010fe <__swsetup_r+0x9a>
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80010f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f4:	d003      	beq.n	80010fe <__swsetup_r+0x9a>
 80010f6:	4621      	mov	r1, r4
 80010f8:	4630      	mov	r0, r6
 80010fa:	f000 f929 	bl	8001350 <__smakebuf_r>
 80010fe:	89a0      	ldrh	r0, [r4, #12]
 8001100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001104:	f010 0301 	ands.w	r3, r0, #1
 8001108:	d00a      	beq.n	8001120 <__swsetup_r+0xbc>
 800110a:	2300      	movs	r3, #0
 800110c:	60a3      	str	r3, [r4, #8]
 800110e:	6963      	ldr	r3, [r4, #20]
 8001110:	425b      	negs	r3, r3
 8001112:	61a3      	str	r3, [r4, #24]
 8001114:	6923      	ldr	r3, [r4, #16]
 8001116:	b943      	cbnz	r3, 800112a <__swsetup_r+0xc6>
 8001118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800111c:	d1ba      	bne.n	8001094 <__swsetup_r+0x30>
 800111e:	bd70      	pop	{r4, r5, r6, pc}
 8001120:	0781      	lsls	r1, r0, #30
 8001122:	bf58      	it	pl
 8001124:	6963      	ldrpl	r3, [r4, #20]
 8001126:	60a3      	str	r3, [r4, #8]
 8001128:	e7f4      	b.n	8001114 <__swsetup_r+0xb0>
 800112a:	2000      	movs	r0, #0
 800112c:	e7f7      	b.n	800111e <__swsetup_r+0xba>
 800112e:	bf00      	nop
 8001130:	20000004 	.word	0x20000004
 8001134:	0800154c 	.word	0x0800154c
 8001138:	0800156c 	.word	0x0800156c
 800113c:	0800152c 	.word	0x0800152c

08001140 <_close_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4d06      	ldr	r5, [pc, #24]	; (800115c <_close_r+0x1c>)
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	602b      	str	r3, [r5, #0]
 800114c:	f7ff f98e 	bl	800046c <_close>
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	d102      	bne.n	800115a <_close_r+0x1a>
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	b103      	cbz	r3, 800115a <_close_r+0x1a>
 8001158:	6023      	str	r3, [r4, #0]
 800115a:	bd38      	pop	{r3, r4, r5, pc}
 800115c:	200000a0 	.word	0x200000a0

08001160 <__sflush_r>:
 8001160:	898a      	ldrh	r2, [r1, #12]
 8001162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001166:	4605      	mov	r5, r0
 8001168:	0710      	lsls	r0, r2, #28
 800116a:	460c      	mov	r4, r1
 800116c:	d458      	bmi.n	8001220 <__sflush_r+0xc0>
 800116e:	684b      	ldr	r3, [r1, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dc05      	bgt.n	8001180 <__sflush_r+0x20>
 8001174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	dc02      	bgt.n	8001180 <__sflush_r+0x20>
 800117a:	2000      	movs	r0, #0
 800117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001182:	2e00      	cmp	r6, #0
 8001184:	d0f9      	beq.n	800117a <__sflush_r+0x1a>
 8001186:	2300      	movs	r3, #0
 8001188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800118c:	682f      	ldr	r7, [r5, #0]
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	d032      	beq.n	80011f8 <__sflush_r+0x98>
 8001192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	075a      	lsls	r2, r3, #29
 8001198:	d505      	bpl.n	80011a6 <__sflush_r+0x46>
 800119a:	6863      	ldr	r3, [r4, #4]
 800119c:	1ac0      	subs	r0, r0, r3
 800119e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011a0:	b10b      	cbz	r3, 80011a6 <__sflush_r+0x46>
 80011a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a4:	1ac0      	subs	r0, r0, r3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4602      	mov	r2, r0
 80011aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ac:	6a21      	ldr	r1, [r4, #32]
 80011ae:	4628      	mov	r0, r5
 80011b0:	47b0      	blx	r6
 80011b2:	1c43      	adds	r3, r0, #1
 80011b4:	89a3      	ldrh	r3, [r4, #12]
 80011b6:	d106      	bne.n	80011c6 <__sflush_r+0x66>
 80011b8:	6829      	ldr	r1, [r5, #0]
 80011ba:	291d      	cmp	r1, #29
 80011bc:	d82c      	bhi.n	8001218 <__sflush_r+0xb8>
 80011be:	4a2a      	ldr	r2, [pc, #168]	; (8001268 <__sflush_r+0x108>)
 80011c0:	40ca      	lsrs	r2, r1
 80011c2:	07d6      	lsls	r6, r2, #31
 80011c4:	d528      	bpl.n	8001218 <__sflush_r+0xb8>
 80011c6:	2200      	movs	r2, #0
 80011c8:	6062      	str	r2, [r4, #4]
 80011ca:	04d9      	lsls	r1, r3, #19
 80011cc:	6922      	ldr	r2, [r4, #16]
 80011ce:	6022      	str	r2, [r4, #0]
 80011d0:	d504      	bpl.n	80011dc <__sflush_r+0x7c>
 80011d2:	1c42      	adds	r2, r0, #1
 80011d4:	d101      	bne.n	80011da <__sflush_r+0x7a>
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	b903      	cbnz	r3, 80011dc <__sflush_r+0x7c>
 80011da:	6560      	str	r0, [r4, #84]	; 0x54
 80011dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011de:	602f      	str	r7, [r5, #0]
 80011e0:	2900      	cmp	r1, #0
 80011e2:	d0ca      	beq.n	800117a <__sflush_r+0x1a>
 80011e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d002      	beq.n	80011f2 <__sflush_r+0x92>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 f8fb 	bl	80013e8 <_free_r>
 80011f2:	2000      	movs	r0, #0
 80011f4:	6360      	str	r0, [r4, #52]	; 0x34
 80011f6:	e7c1      	b.n	800117c <__sflush_r+0x1c>
 80011f8:	6a21      	ldr	r1, [r4, #32]
 80011fa:	2301      	movs	r3, #1
 80011fc:	4628      	mov	r0, r5
 80011fe:	47b0      	blx	r6
 8001200:	1c41      	adds	r1, r0, #1
 8001202:	d1c7      	bne.n	8001194 <__sflush_r+0x34>
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0c4      	beq.n	8001194 <__sflush_r+0x34>
 800120a:	2b1d      	cmp	r3, #29
 800120c:	d001      	beq.n	8001212 <__sflush_r+0xb2>
 800120e:	2b16      	cmp	r3, #22
 8001210:	d101      	bne.n	8001216 <__sflush_r+0xb6>
 8001212:	602f      	str	r7, [r5, #0]
 8001214:	e7b1      	b.n	800117a <__sflush_r+0x1a>
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	81a3      	strh	r3, [r4, #12]
 800121e:	e7ad      	b.n	800117c <__sflush_r+0x1c>
 8001220:	690f      	ldr	r7, [r1, #16]
 8001222:	2f00      	cmp	r7, #0
 8001224:	d0a9      	beq.n	800117a <__sflush_r+0x1a>
 8001226:	0793      	lsls	r3, r2, #30
 8001228:	680e      	ldr	r6, [r1, #0]
 800122a:	bf08      	it	eq
 800122c:	694b      	ldreq	r3, [r1, #20]
 800122e:	600f      	str	r7, [r1, #0]
 8001230:	bf18      	it	ne
 8001232:	2300      	movne	r3, #0
 8001234:	eba6 0807 	sub.w	r8, r6, r7
 8001238:	608b      	str	r3, [r1, #8]
 800123a:	f1b8 0f00 	cmp.w	r8, #0
 800123e:	dd9c      	ble.n	800117a <__sflush_r+0x1a>
 8001240:	6a21      	ldr	r1, [r4, #32]
 8001242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001244:	4643      	mov	r3, r8
 8001246:	463a      	mov	r2, r7
 8001248:	4628      	mov	r0, r5
 800124a:	47b0      	blx	r6
 800124c:	2800      	cmp	r0, #0
 800124e:	dc06      	bgt.n	800125e <__sflush_r+0xfe>
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	e78e      	b.n	800117c <__sflush_r+0x1c>
 800125e:	4407      	add	r7, r0
 8001260:	eba8 0800 	sub.w	r8, r8, r0
 8001264:	e7e9      	b.n	800123a <__sflush_r+0xda>
 8001266:	bf00      	nop
 8001268:	20400001 	.word	0x20400001

0800126c <_fflush_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	690b      	ldr	r3, [r1, #16]
 8001270:	4605      	mov	r5, r0
 8001272:	460c      	mov	r4, r1
 8001274:	b913      	cbnz	r3, 800127c <_fflush_r+0x10>
 8001276:	2500      	movs	r5, #0
 8001278:	4628      	mov	r0, r5
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	b118      	cbz	r0, 8001286 <_fflush_r+0x1a>
 800127e:	6983      	ldr	r3, [r0, #24]
 8001280:	b90b      	cbnz	r3, 8001286 <_fflush_r+0x1a>
 8001282:	f7ff fa4f 	bl	8000724 <__sinit>
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <_fflush_r+0x6c>)
 8001288:	429c      	cmp	r4, r3
 800128a:	d11b      	bne.n	80012c4 <_fflush_r+0x58>
 800128c:	686c      	ldr	r4, [r5, #4]
 800128e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ef      	beq.n	8001276 <_fflush_r+0xa>
 8001296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001298:	07d0      	lsls	r0, r2, #31
 800129a:	d404      	bmi.n	80012a6 <_fflush_r+0x3a>
 800129c:	0599      	lsls	r1, r3, #22
 800129e:	d402      	bmi.n	80012a6 <_fflush_r+0x3a>
 80012a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012a2:	f7ff fadd 	bl	8000860 <__retarget_lock_acquire_recursive>
 80012a6:	4628      	mov	r0, r5
 80012a8:	4621      	mov	r1, r4
 80012aa:	f7ff ff59 	bl	8001160 <__sflush_r>
 80012ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012b0:	07da      	lsls	r2, r3, #31
 80012b2:	4605      	mov	r5, r0
 80012b4:	d4e0      	bmi.n	8001278 <_fflush_r+0xc>
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	059b      	lsls	r3, r3, #22
 80012ba:	d4dd      	bmi.n	8001278 <_fflush_r+0xc>
 80012bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012be:	f7ff fad0 	bl	8000862 <__retarget_lock_release_recursive>
 80012c2:	e7d9      	b.n	8001278 <_fflush_r+0xc>
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <_fflush_r+0x70>)
 80012c6:	429c      	cmp	r4, r3
 80012c8:	d101      	bne.n	80012ce <_fflush_r+0x62>
 80012ca:	68ac      	ldr	r4, [r5, #8]
 80012cc:	e7df      	b.n	800128e <_fflush_r+0x22>
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <_fflush_r+0x74>)
 80012d0:	429c      	cmp	r4, r3
 80012d2:	bf08      	it	eq
 80012d4:	68ec      	ldreq	r4, [r5, #12]
 80012d6:	e7da      	b.n	800128e <_fflush_r+0x22>
 80012d8:	0800154c 	.word	0x0800154c
 80012dc:	0800156c 	.word	0x0800156c
 80012e0:	0800152c 	.word	0x0800152c

080012e4 <_lseek_r>:
 80012e4:	b538      	push	{r3, r4, r5, lr}
 80012e6:	4d07      	ldr	r5, [pc, #28]	; (8001304 <_lseek_r+0x20>)
 80012e8:	4604      	mov	r4, r0
 80012ea:	4608      	mov	r0, r1
 80012ec:	4611      	mov	r1, r2
 80012ee:	2200      	movs	r2, #0
 80012f0:	602a      	str	r2, [r5, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f7ff f8e1 	bl	80004ba <_lseek>
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	d102      	bne.n	8001302 <_lseek_r+0x1e>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	b103      	cbz	r3, 8001302 <_lseek_r+0x1e>
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	bd38      	pop	{r3, r4, r5, pc}
 8001304:	200000a0 	.word	0x200000a0

08001308 <__swhatbuf_r>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	460e      	mov	r6, r1
 800130c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001310:	2900      	cmp	r1, #0
 8001312:	b096      	sub	sp, #88	; 0x58
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
 8001318:	da07      	bge.n	800132a <__swhatbuf_r+0x22>
 800131a:	2300      	movs	r3, #0
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	89b3      	ldrh	r3, [r6, #12]
 8001320:	061a      	lsls	r2, r3, #24
 8001322:	d410      	bmi.n	8001346 <__swhatbuf_r+0x3e>
 8001324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001328:	e00e      	b.n	8001348 <__swhatbuf_r+0x40>
 800132a:	466a      	mov	r2, sp
 800132c:	f000 f8be 	bl	80014ac <_fstat_r>
 8001330:	2800      	cmp	r0, #0
 8001332:	dbf2      	blt.n	800131a <__swhatbuf_r+0x12>
 8001334:	9a01      	ldr	r2, [sp, #4]
 8001336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800133a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800133e:	425a      	negs	r2, r3
 8001340:	415a      	adcs	r2, r3
 8001342:	602a      	str	r2, [r5, #0]
 8001344:	e7ee      	b.n	8001324 <__swhatbuf_r+0x1c>
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	2000      	movs	r0, #0
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	b016      	add	sp, #88	; 0x58
 800134e:	bd70      	pop	{r4, r5, r6, pc}

08001350 <__smakebuf_r>:
 8001350:	898b      	ldrh	r3, [r1, #12]
 8001352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001354:	079d      	lsls	r5, r3, #30
 8001356:	4606      	mov	r6, r0
 8001358:	460c      	mov	r4, r1
 800135a:	d507      	bpl.n	800136c <__smakebuf_r+0x1c>
 800135c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	6123      	str	r3, [r4, #16]
 8001364:	2301      	movs	r3, #1
 8001366:	6163      	str	r3, [r4, #20]
 8001368:	b002      	add	sp, #8
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	ab01      	add	r3, sp, #4
 800136e:	466a      	mov	r2, sp
 8001370:	f7ff ffca 	bl	8001308 <__swhatbuf_r>
 8001374:	9900      	ldr	r1, [sp, #0]
 8001376:	4605      	mov	r5, r0
 8001378:	4630      	mov	r0, r6
 800137a:	f7ff fa73 	bl	8000864 <_malloc_r>
 800137e:	b948      	cbnz	r0, 8001394 <__smakebuf_r+0x44>
 8001380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001384:	059a      	lsls	r2, r3, #22
 8001386:	d4ef      	bmi.n	8001368 <__smakebuf_r+0x18>
 8001388:	f023 0303 	bic.w	r3, r3, #3
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	81a3      	strh	r3, [r4, #12]
 8001392:	e7e3      	b.n	800135c <__smakebuf_r+0xc>
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <__smakebuf_r+0x7c>)
 8001396:	62b3      	str	r3, [r6, #40]	; 0x28
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	6020      	str	r0, [r4, #0]
 800139c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a0:	81a3      	strh	r3, [r4, #12]
 80013a2:	9b00      	ldr	r3, [sp, #0]
 80013a4:	6163      	str	r3, [r4, #20]
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	6120      	str	r0, [r4, #16]
 80013aa:	b15b      	cbz	r3, 80013c4 <__smakebuf_r+0x74>
 80013ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013b0:	4630      	mov	r0, r6
 80013b2:	f000 f88d 	bl	80014d0 <_isatty_r>
 80013b6:	b128      	cbz	r0, 80013c4 <__smakebuf_r+0x74>
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	81a3      	strh	r3, [r4, #12]
 80013c4:	89a0      	ldrh	r0, [r4, #12]
 80013c6:	4305      	orrs	r5, r0
 80013c8:	81a5      	strh	r5, [r4, #12]
 80013ca:	e7cd      	b.n	8001368 <__smakebuf_r+0x18>
 80013cc:	080006bd 	.word	0x080006bd

080013d0 <__malloc_lock>:
 80013d0:	4801      	ldr	r0, [pc, #4]	; (80013d8 <__malloc_lock+0x8>)
 80013d2:	f7ff ba45 	b.w	8000860 <__retarget_lock_acquire_recursive>
 80013d6:	bf00      	nop
 80013d8:	20000098 	.word	0x20000098

080013dc <__malloc_unlock>:
 80013dc:	4801      	ldr	r0, [pc, #4]	; (80013e4 <__malloc_unlock+0x8>)
 80013de:	f7ff ba40 	b.w	8000862 <__retarget_lock_release_recursive>
 80013e2:	bf00      	nop
 80013e4:	20000098 	.word	0x20000098

080013e8 <_free_r>:
 80013e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d048      	beq.n	8001480 <_free_r+0x98>
 80013ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013f2:	9001      	str	r0, [sp, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f1a1 0404 	sub.w	r4, r1, #4
 80013fa:	bfb8      	it	lt
 80013fc:	18e4      	addlt	r4, r4, r3
 80013fe:	f7ff ffe7 	bl	80013d0 <__malloc_lock>
 8001402:	4a20      	ldr	r2, [pc, #128]	; (8001484 <_free_r+0x9c>)
 8001404:	9801      	ldr	r0, [sp, #4]
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	4615      	mov	r5, r2
 800140a:	b933      	cbnz	r3, 800141a <_free_r+0x32>
 800140c:	6063      	str	r3, [r4, #4]
 800140e:	6014      	str	r4, [r2, #0]
 8001410:	b003      	add	sp, #12
 8001412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001416:	f7ff bfe1 	b.w	80013dc <__malloc_unlock>
 800141a:	42a3      	cmp	r3, r4
 800141c:	d90b      	bls.n	8001436 <_free_r+0x4e>
 800141e:	6821      	ldr	r1, [r4, #0]
 8001420:	1862      	adds	r2, r4, r1
 8001422:	4293      	cmp	r3, r2
 8001424:	bf04      	itt	eq
 8001426:	681a      	ldreq	r2, [r3, #0]
 8001428:	685b      	ldreq	r3, [r3, #4]
 800142a:	6063      	str	r3, [r4, #4]
 800142c:	bf04      	itt	eq
 800142e:	1852      	addeq	r2, r2, r1
 8001430:	6022      	streq	r2, [r4, #0]
 8001432:	602c      	str	r4, [r5, #0]
 8001434:	e7ec      	b.n	8001410 <_free_r+0x28>
 8001436:	461a      	mov	r2, r3
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	b10b      	cbz	r3, 8001440 <_free_r+0x58>
 800143c:	42a3      	cmp	r3, r4
 800143e:	d9fa      	bls.n	8001436 <_free_r+0x4e>
 8001440:	6811      	ldr	r1, [r2, #0]
 8001442:	1855      	adds	r5, r2, r1
 8001444:	42a5      	cmp	r5, r4
 8001446:	d10b      	bne.n	8001460 <_free_r+0x78>
 8001448:	6824      	ldr	r4, [r4, #0]
 800144a:	4421      	add	r1, r4
 800144c:	1854      	adds	r4, r2, r1
 800144e:	42a3      	cmp	r3, r4
 8001450:	6011      	str	r1, [r2, #0]
 8001452:	d1dd      	bne.n	8001410 <_free_r+0x28>
 8001454:	681c      	ldr	r4, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	6053      	str	r3, [r2, #4]
 800145a:	4421      	add	r1, r4
 800145c:	6011      	str	r1, [r2, #0]
 800145e:	e7d7      	b.n	8001410 <_free_r+0x28>
 8001460:	d902      	bls.n	8001468 <_free_r+0x80>
 8001462:	230c      	movs	r3, #12
 8001464:	6003      	str	r3, [r0, #0]
 8001466:	e7d3      	b.n	8001410 <_free_r+0x28>
 8001468:	6825      	ldr	r5, [r4, #0]
 800146a:	1961      	adds	r1, r4, r5
 800146c:	428b      	cmp	r3, r1
 800146e:	bf04      	itt	eq
 8001470:	6819      	ldreq	r1, [r3, #0]
 8001472:	685b      	ldreq	r3, [r3, #4]
 8001474:	6063      	str	r3, [r4, #4]
 8001476:	bf04      	itt	eq
 8001478:	1949      	addeq	r1, r1, r5
 800147a:	6021      	streq	r1, [r4, #0]
 800147c:	6054      	str	r4, [r2, #4]
 800147e:	e7c7      	b.n	8001410 <_free_r+0x28>
 8001480:	b003      	add	sp, #12
 8001482:	bd30      	pop	{r4, r5, pc}
 8001484:	20000088 	.word	0x20000088

08001488 <_read_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d07      	ldr	r5, [pc, #28]	; (80014a8 <_read_r+0x20>)
 800148c:	4604      	mov	r4, r0
 800148e:	4608      	mov	r0, r1
 8001490:	4611      	mov	r1, r2
 8001492:	2200      	movs	r2, #0
 8001494:	602a      	str	r2, [r5, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	f7fe ffaf 	bl	80003fa <_read>
 800149c:	1c43      	adds	r3, r0, #1
 800149e:	d102      	bne.n	80014a6 <_read_r+0x1e>
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	b103      	cbz	r3, 80014a6 <_read_r+0x1e>
 80014a4:	6023      	str	r3, [r4, #0]
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
 80014a8:	200000a0 	.word	0x200000a0

080014ac <_fstat_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4d07      	ldr	r5, [pc, #28]	; (80014cc <_fstat_r+0x20>)
 80014b0:	2300      	movs	r3, #0
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	602b      	str	r3, [r5, #0]
 80014ba:	f7fe ffe3 	bl	8000484 <_fstat>
 80014be:	1c43      	adds	r3, r0, #1
 80014c0:	d102      	bne.n	80014c8 <_fstat_r+0x1c>
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	b103      	cbz	r3, 80014c8 <_fstat_r+0x1c>
 80014c6:	6023      	str	r3, [r4, #0]
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
 80014ca:	bf00      	nop
 80014cc:	200000a0 	.word	0x200000a0

080014d0 <_isatty_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d06      	ldr	r5, [pc, #24]	; (80014ec <_isatty_r+0x1c>)
 80014d4:	2300      	movs	r3, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	602b      	str	r3, [r5, #0]
 80014dc:	f7fe ffe2 	bl	80004a4 <_isatty>
 80014e0:	1c43      	adds	r3, r0, #1
 80014e2:	d102      	bne.n	80014ea <_isatty_r+0x1a>
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	b103      	cbz	r3, 80014ea <_isatty_r+0x1a>
 80014e8:	6023      	str	r3, [r4, #0]
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
 80014ec:	200000a0 	.word	0x200000a0

080014f0 <_init>:
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	bf00      	nop
 80014f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f6:	bc08      	pop	{r3}
 80014f8:	469e      	mov	lr, r3
 80014fa:	4770      	bx	lr

080014fc <_fini>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr
