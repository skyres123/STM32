
f411_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001728  08001728  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001728  08001728  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001728  08001728  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001798  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001798  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002060  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008cb  00000000  00000000  000220f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  000229c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00022ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015673  00000000  00000000  00022f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003497  00000000  00000000  00038573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b93  00000000  00000000  0003ba0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf59d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001104  00000000  00000000  000bf5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001654 	.word	0x08001654

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001654 	.word	0x08001654

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define GPIOAEN (1u<<0)
#define GPIOA_5 (1u<<5)

#define LED_PIN GPIOA_5
char key;
int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	//GPIOA clock enabled
	RCC->AHB1ENR  |= GPIOAEN;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <main+0x68>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <main+0x68>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	//GPIOA pin5 set as output
	GPIOA -> MODER |= (1u<<10);
 8000290:	4b16      	ldr	r3, [pc, #88]	; (80002ec <main+0x6c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a15      	ldr	r2, [pc, #84]	; (80002ec <main+0x6c>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1u<<11);
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <main+0x6c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <main+0x6c>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]
	uart2_rxtx_init();
 80002a8:	f000 f914 	bl	80004d4 <uart2_rxtx_init>
while(1){
	key = uart2_read();
 80002ac:	f000 f982 	bl	80005b4 <uart2_read>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <main+0x70>)
 80002b6:	701a      	strb	r2, [r3, #0]
		if (key=='1'){
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <main+0x70>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b31      	cmp	r3, #49	; 0x31
 80002be:	d109      	bne.n	80002d4 <main+0x54>
			GPIOA->ODR |= LED_PIN;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0x6c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <main+0x6c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
			printf("button pressed");
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <main+0x74>)
 80002ce:	f000 fa33 	bl	8000738 <iprintf>
 80002d2:	e7eb      	b.n	80002ac <main+0x2c>
		}
		else{
			GPIOA->ODR &= ~LED_PIN;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0x6c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <main+0x6c>)
 80002da:	f023 0320 	bic.w	r3, r3, #32
 80002de:	6153      	str	r3, [r2, #20]
			printf("button not pressed");
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <main+0x78>)
 80002e2:	f000 fa29 	bl	8000738 <iprintf>
	key = uart2_read();
 80002e6:	e7e1      	b.n	80002ac <main+0x2c>
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000
 80002f0:	20000084 	.word	0x20000084
 80002f4:	0800166c 	.word	0x0800166c
 80002f8:	0800167c 	.word	0x0800167c

080002fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <NMI_Handler+0x4>

08000302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <MemManage_Handler+0x4>

0800030e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <UsageFault_Handler+0x4>

0800031a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000348:	f000 f9b0 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}

08000350 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	e00a      	b.n	8000378 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000362:	f3af 8000 	nop.w
 8000366:	4601      	mov	r1, r0
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	60ba      	str	r2, [r7, #8]
 800036e:	b2ca      	uxtb	r2, r1
 8000370:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	3301      	adds	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	429a      	cmp	r2, r3
 800037e:	dbf0      	blt.n	8000362 <_read+0x12>
	}

return len;
 8000380:	687b      	ldr	r3, [r7, #4]
}
 8000382:	4618      	mov	r0, r3
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b086      	sub	sp, #24
 800038e:	af00      	add	r7, sp, #0
 8000390:	60f8      	str	r0, [r7, #12]
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e009      	b.n	80003b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	60ba      	str	r2, [r7, #8]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f889 	bl	80004bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3301      	adds	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	dbf1      	blt.n	800039c <_write+0x12>
	}
	return len;
 80003b8:	687b      	ldr	r3, [r7, #4]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <_close>:

int _close(int file)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b083      	sub	sp, #12
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
	return -1;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ea:	605a      	str	r2, [r3, #4]
	return 0;
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <_isatty>:

int _isatty(int file)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
	return 1;
 8000402:	2301      	movs	r3, #1
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	return 0;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000434:	4a14      	ldr	r2, [pc, #80]	; (8000488 <_sbrk+0x5c>)
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <_sbrk+0x60>)
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <_sbrk+0x64>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d102      	bne.n	800044e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <_sbrk+0x64>)
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <_sbrk+0x68>)
 800044c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <_sbrk+0x64>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	693a      	ldr	r2, [r7, #16]
 8000458:	429a      	cmp	r2, r3
 800045a:	d207      	bcs.n	800046c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800045c:	f000 f93a 	bl	80006d4 <__errno>
 8000460:	4603      	mov	r3, r0
 8000462:	220c      	movs	r2, #12
 8000464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
 800046a:	e009      	b.n	8000480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	4a05      	ldr	r2, [pc, #20]	; (8000490 <_sbrk+0x64>)
 800047c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20020000 	.word	0x20020000
 800048c:	00000400 	.word	0x00000400
 8000490:	20000088 	.word	0x20000088
 8000494:	200000a0 	.word	0x200000a0

08000498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SystemInit+0x20>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <SystemInit+0x20>)
 80004a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <__io_putchar>:

void uart2_write(int ch);


int __io_putchar(int ch)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 f889 	bl	80005dc <uart2_write>
	return ch;
 80004ca:	687b      	ldr	r3, [r7, #4]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <uart2_rxtx_init>:

void uart2_rxtx_init(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	//---------configure uart gpıo pin--------
	//enable clock accsess to gpioa
	RCC->AHB1ENR |= GPIOEN;
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <uart2_rxtx_init+0xd0>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <uart2_rxtx_init+0xd0>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
	// set PA2 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<4);
 80004e4:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <uart2_rxtx_init+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <uart2_rxtx_init+0xd4>)
 80004ea:	f023 0310 	bic.w	r3, r3, #16
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<5);
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <uart2_rxtx_init+0xd4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <uart2_rxtx_init+0xd4>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	6013      	str	r3, [r2, #0]
	//set PA2 alternate. function. type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1u<<8);
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <uart2_rxtx_init+0xd4>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1u<<9);
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1u<<10);
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<11);
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a20      	ldr	r2, [pc, #128]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800052a:	6213      	str	r3, [r2, #32]
	//set PA3 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<6);
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000536:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<7);
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800053e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000542:	6013      	str	r3, [r2, #0]
	//set PA3 alternate. function. type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1u<<12);
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800054a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1u<<13);
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800055a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1u<<14);
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <uart2_rxtx_init+0xd4>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<15);
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <uart2_rxtx_init+0xd4>)
 800056e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000572:	6213      	str	r3, [r2, #32]
	//---------configure uart module ---------
	//enable clock access
	RCC->APB1ENR |= UART2EN;
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <uart2_rxtx_init+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <uart2_rxtx_init+0xd0>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
	//configure the uart baud rate
	uart_set_baudrate(USART2 ,APB1_CLK ,UART_BAUDRATE);
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	4909      	ldr	r1, [pc, #36]	; (80005ac <uart2_rxtx_init+0xd8>)
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <uart2_rxtx_init+0xdc>)
 8000588:	f000 f840 	bl	800060c <uart_set_baudrate>
	//congigure the transfer direction
	USART2 -> CR1 = (CR1_TE | CR1_RE);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_rxtx_init+0xdc>)
 800058e:	220c      	movs	r2, #12
 8000590:	60da      	str	r2, [r3, #12]
	//enable uart module
	USART2 -> CR1 |= CR1_UE;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <uart2_rxtx_init+0xdc>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <uart2_rxtx_init+0xdc>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800059c:	60d3      	str	r3, [r2, #12]
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	00f42400 	.word	0x00f42400
 80005b0:	40004400 	.word	0x40004400

080005b4 <uart2_read>:

	//enable uart module
	USART2 -> CR1 |= CR1_UE;

}
char uart2_read (void){
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	//make sure receive data register is not empty
		while (!(USART2-> SR & SR_RXNE)){}
 80005b8:	bf00      	nop
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <uart2_read+0x24>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0320 	and.w	r3, r3, #32
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <uart2_read+0x6>

		//Read Data
		return USART2->DR;
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <uart2_read+0x24>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	b2db      	uxtb	r3, r3
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400

080005dc <uart2_write>:

void uart2_write(int ch){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//make sure transmit data register is empty
	while (!(USART2-> SR & SR_TXE)){}
 80005e4:	bf00      	nop
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <uart2_write+0x2c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f9      	beq.n	80005e6 <uart2_write+0xa>

	//write to transmit data register
	USART2 -> DR = (ch & 0xFF);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <uart2_write+0x2c>)
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	6053      	str	r3, [r2, #4]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004400 	.word	0x40004400

0800060c <uart_set_baudrate>:


static void uart_set_baudrate( USART_TypeDef *USARTx ,uint32_t PeriphClk, uint32_t BaudRate){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 USARTx->BRR  = compute_uart_bd(PeriphClk ,BaudRate);
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f000 f808 	bl	8000630 <compute_uart_bd>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	609a      	str	r2, [r3, #8]
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
return	((PeriphClk + (BaudRate/2u))/BaudRate);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	085a      	lsrs	r2, r3, #1
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	441a      	add	r2, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	fbb2 f3f3 	udiv	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800065e:	490e      	ldr	r1, [pc, #56]	; (8000698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000674:	4c0b      	ldr	r4, [pc, #44]	; (80006a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000682:	f7ff ff09 	bl	8000498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000686:	f000 f82b 	bl	80006e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068a:	f7ff fdf9 	bl	8000280 <main>
  bx  lr    
 800068e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800069c:	08001730 	.word	0x08001730
  ldr r2, =_sbss
 80006a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC_IRQHandler>
	...

080006ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x20>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x24>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_IncTick+0x24>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000
 80006d0:	2000008c 	.word	0x2000008c

080006d4 <__errno>:
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <__errno+0x8>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000004 	.word	0x20000004

080006e0 <__libc_init_array>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4d0d      	ldr	r5, [pc, #52]	; (8000718 <__libc_init_array+0x38>)
 80006e4:	4c0d      	ldr	r4, [pc, #52]	; (800071c <__libc_init_array+0x3c>)
 80006e6:	1b64      	subs	r4, r4, r5
 80006e8:	10a4      	asrs	r4, r4, #2
 80006ea:	2600      	movs	r6, #0
 80006ec:	42a6      	cmp	r6, r4
 80006ee:	d109      	bne.n	8000704 <__libc_init_array+0x24>
 80006f0:	4d0b      	ldr	r5, [pc, #44]	; (8000720 <__libc_init_array+0x40>)
 80006f2:	4c0c      	ldr	r4, [pc, #48]	; (8000724 <__libc_init_array+0x44>)
 80006f4:	f000 ffae 	bl	8001654 <_init>
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	10a4      	asrs	r4, r4, #2
 80006fc:	2600      	movs	r6, #0
 80006fe:	42a6      	cmp	r6, r4
 8000700:	d105      	bne.n	800070e <__libc_init_array+0x2e>
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f855 3b04 	ldr.w	r3, [r5], #4
 8000708:	4798      	blx	r3
 800070a:	3601      	adds	r6, #1
 800070c:	e7ee      	b.n	80006ec <__libc_init_array+0xc>
 800070e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000712:	4798      	blx	r3
 8000714:	3601      	adds	r6, #1
 8000716:	e7f2      	b.n	80006fe <__libc_init_array+0x1e>
 8000718:	08001728 	.word	0x08001728
 800071c:	08001728 	.word	0x08001728
 8000720:	08001728 	.word	0x08001728
 8000724:	0800172c 	.word	0x0800172c

08000728 <memset>:
 8000728:	4402      	add	r2, r0
 800072a:	4603      	mov	r3, r0
 800072c:	4293      	cmp	r3, r2
 800072e:	d100      	bne.n	8000732 <memset+0xa>
 8000730:	4770      	bx	lr
 8000732:	f803 1b01 	strb.w	r1, [r3], #1
 8000736:	e7f9      	b.n	800072c <memset+0x4>

08000738 <iprintf>:
 8000738:	b40f      	push	{r0, r1, r2, r3}
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <iprintf+0x2c>)
 800073c:	b513      	push	{r0, r1, r4, lr}
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	b124      	cbz	r4, 800074c <iprintf+0x14>
 8000742:	69a3      	ldr	r3, [r4, #24]
 8000744:	b913      	cbnz	r3, 800074c <iprintf+0x14>
 8000746:	4620      	mov	r0, r4
 8000748:	f000 f866 	bl	8000818 <__sinit>
 800074c:	ab05      	add	r3, sp, #20
 800074e:	9a04      	ldr	r2, [sp, #16]
 8000750:	68a1      	ldr	r1, [r4, #8]
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	4620      	mov	r0, r4
 8000756:	f000 f9bd 	bl	8000ad4 <_vfiprintf_r>
 800075a:	b002      	add	sp, #8
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	b004      	add	sp, #16
 8000762:	4770      	bx	lr
 8000764:	20000004 	.word	0x20000004

08000768 <std>:
 8000768:	2300      	movs	r3, #0
 800076a:	b510      	push	{r4, lr}
 800076c:	4604      	mov	r4, r0
 800076e:	e9c0 3300 	strd	r3, r3, [r0]
 8000772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000776:	6083      	str	r3, [r0, #8]
 8000778:	8181      	strh	r1, [r0, #12]
 800077a:	6643      	str	r3, [r0, #100]	; 0x64
 800077c:	81c2      	strh	r2, [r0, #14]
 800077e:	6183      	str	r3, [r0, #24]
 8000780:	4619      	mov	r1, r3
 8000782:	2208      	movs	r2, #8
 8000784:	305c      	adds	r0, #92	; 0x5c
 8000786:	f7ff ffcf 	bl	8000728 <memset>
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <std+0x38>)
 800078c:	6263      	str	r3, [r4, #36]	; 0x24
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <std+0x3c>)
 8000790:	62a3      	str	r3, [r4, #40]	; 0x28
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <std+0x40>)
 8000794:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <std+0x44>)
 8000798:	6224      	str	r4, [r4, #32]
 800079a:	6323      	str	r3, [r4, #48]	; 0x30
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	0800107d 	.word	0x0800107d
 80007a4:	0800109f 	.word	0x0800109f
 80007a8:	080010d7 	.word	0x080010d7
 80007ac:	080010fb 	.word	0x080010fb

080007b0 <_cleanup_r>:
 80007b0:	4901      	ldr	r1, [pc, #4]	; (80007b8 <_cleanup_r+0x8>)
 80007b2:	f000 b8af 	b.w	8000914 <_fwalk_reent>
 80007b6:	bf00      	nop
 80007b8:	080013d5 	.word	0x080013d5

080007bc <__sfmoreglue>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	2268      	movs	r2, #104	; 0x68
 80007c0:	1e4d      	subs	r5, r1, #1
 80007c2:	4355      	muls	r5, r2
 80007c4:	460e      	mov	r6, r1
 80007c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007ca:	f000 f8e5 	bl	8000998 <_malloc_r>
 80007ce:	4604      	mov	r4, r0
 80007d0:	b140      	cbz	r0, 80007e4 <__sfmoreglue+0x28>
 80007d2:	2100      	movs	r1, #0
 80007d4:	e9c0 1600 	strd	r1, r6, [r0]
 80007d8:	300c      	adds	r0, #12
 80007da:	60a0      	str	r0, [r4, #8]
 80007dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007e0:	f7ff ffa2 	bl	8000728 <memset>
 80007e4:	4620      	mov	r0, r4
 80007e6:	bd70      	pop	{r4, r5, r6, pc}

080007e8 <__sfp_lock_acquire>:
 80007e8:	4801      	ldr	r0, [pc, #4]	; (80007f0 <__sfp_lock_acquire+0x8>)
 80007ea:	f000 b8b3 	b.w	8000954 <__retarget_lock_acquire_recursive>
 80007ee:	bf00      	nop
 80007f0:	20000091 	.word	0x20000091

080007f4 <__sfp_lock_release>:
 80007f4:	4801      	ldr	r0, [pc, #4]	; (80007fc <__sfp_lock_release+0x8>)
 80007f6:	f000 b8ae 	b.w	8000956 <__retarget_lock_release_recursive>
 80007fa:	bf00      	nop
 80007fc:	20000091 	.word	0x20000091

08000800 <__sinit_lock_acquire>:
 8000800:	4801      	ldr	r0, [pc, #4]	; (8000808 <__sinit_lock_acquire+0x8>)
 8000802:	f000 b8a7 	b.w	8000954 <__retarget_lock_acquire_recursive>
 8000806:	bf00      	nop
 8000808:	20000092 	.word	0x20000092

0800080c <__sinit_lock_release>:
 800080c:	4801      	ldr	r0, [pc, #4]	; (8000814 <__sinit_lock_release+0x8>)
 800080e:	f000 b8a2 	b.w	8000956 <__retarget_lock_release_recursive>
 8000812:	bf00      	nop
 8000814:	20000092 	.word	0x20000092

08000818 <__sinit>:
 8000818:	b510      	push	{r4, lr}
 800081a:	4604      	mov	r4, r0
 800081c:	f7ff fff0 	bl	8000800 <__sinit_lock_acquire>
 8000820:	69a3      	ldr	r3, [r4, #24]
 8000822:	b11b      	cbz	r3, 800082c <__sinit+0x14>
 8000824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000828:	f7ff bff0 	b.w	800080c <__sinit_lock_release>
 800082c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000830:	6523      	str	r3, [r4, #80]	; 0x50
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <__sinit+0x68>)
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <__sinit+0x6c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	62a2      	str	r2, [r4, #40]	; 0x28
 800083a:	42a3      	cmp	r3, r4
 800083c:	bf04      	itt	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	61a3      	streq	r3, [r4, #24]
 8000842:	4620      	mov	r0, r4
 8000844:	f000 f820 	bl	8000888 <__sfp>
 8000848:	6060      	str	r0, [r4, #4]
 800084a:	4620      	mov	r0, r4
 800084c:	f000 f81c 	bl	8000888 <__sfp>
 8000850:	60a0      	str	r0, [r4, #8]
 8000852:	4620      	mov	r0, r4
 8000854:	f000 f818 	bl	8000888 <__sfp>
 8000858:	2200      	movs	r2, #0
 800085a:	60e0      	str	r0, [r4, #12]
 800085c:	2104      	movs	r1, #4
 800085e:	6860      	ldr	r0, [r4, #4]
 8000860:	f7ff ff82 	bl	8000768 <std>
 8000864:	68a0      	ldr	r0, [r4, #8]
 8000866:	2201      	movs	r2, #1
 8000868:	2109      	movs	r1, #9
 800086a:	f7ff ff7d 	bl	8000768 <std>
 800086e:	68e0      	ldr	r0, [r4, #12]
 8000870:	2202      	movs	r2, #2
 8000872:	2112      	movs	r1, #18
 8000874:	f7ff ff78 	bl	8000768 <std>
 8000878:	2301      	movs	r3, #1
 800087a:	61a3      	str	r3, [r4, #24]
 800087c:	e7d2      	b.n	8000824 <__sinit+0xc>
 800087e:	bf00      	nop
 8000880:	08001690 	.word	0x08001690
 8000884:	080007b1 	.word	0x080007b1

08000888 <__sfp>:
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	4607      	mov	r7, r0
 800088c:	f7ff ffac 	bl	80007e8 <__sfp_lock_acquire>
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <__sfp+0x84>)
 8000892:	681e      	ldr	r6, [r3, #0]
 8000894:	69b3      	ldr	r3, [r6, #24]
 8000896:	b913      	cbnz	r3, 800089e <__sfp+0x16>
 8000898:	4630      	mov	r0, r6
 800089a:	f7ff ffbd 	bl	8000818 <__sinit>
 800089e:	3648      	adds	r6, #72	; 0x48
 80008a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	d503      	bpl.n	80008b0 <__sfp+0x28>
 80008a8:	6833      	ldr	r3, [r6, #0]
 80008aa:	b30b      	cbz	r3, 80008f0 <__sfp+0x68>
 80008ac:	6836      	ldr	r6, [r6, #0]
 80008ae:	e7f7      	b.n	80008a0 <__sfp+0x18>
 80008b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008b4:	b9d5      	cbnz	r5, 80008ec <__sfp+0x64>
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <__sfp+0x88>)
 80008b8:	60e3      	str	r3, [r4, #12]
 80008ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008be:	6665      	str	r5, [r4, #100]	; 0x64
 80008c0:	f000 f847 	bl	8000952 <__retarget_lock_init_recursive>
 80008c4:	f7ff ff96 	bl	80007f4 <__sfp_lock_release>
 80008c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008d0:	6025      	str	r5, [r4, #0]
 80008d2:	61a5      	str	r5, [r4, #24]
 80008d4:	2208      	movs	r2, #8
 80008d6:	4629      	mov	r1, r5
 80008d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008dc:	f7ff ff24 	bl	8000728 <memset>
 80008e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008e8:	4620      	mov	r0, r4
 80008ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ec:	3468      	adds	r4, #104	; 0x68
 80008ee:	e7d9      	b.n	80008a4 <__sfp+0x1c>
 80008f0:	2104      	movs	r1, #4
 80008f2:	4638      	mov	r0, r7
 80008f4:	f7ff ff62 	bl	80007bc <__sfmoreglue>
 80008f8:	4604      	mov	r4, r0
 80008fa:	6030      	str	r0, [r6, #0]
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d1d5      	bne.n	80008ac <__sfp+0x24>
 8000900:	f7ff ff78 	bl	80007f4 <__sfp_lock_release>
 8000904:	230c      	movs	r3, #12
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	e7ee      	b.n	80008e8 <__sfp+0x60>
 800090a:	bf00      	nop
 800090c:	08001690 	.word	0x08001690
 8000910:	ffff0001 	.word	0xffff0001

08000914 <_fwalk_reent>:
 8000914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000918:	4606      	mov	r6, r0
 800091a:	4688      	mov	r8, r1
 800091c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000920:	2700      	movs	r7, #0
 8000922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000926:	f1b9 0901 	subs.w	r9, r9, #1
 800092a:	d505      	bpl.n	8000938 <_fwalk_reent+0x24>
 800092c:	6824      	ldr	r4, [r4, #0]
 800092e:	2c00      	cmp	r4, #0
 8000930:	d1f7      	bne.n	8000922 <_fwalk_reent+0xe>
 8000932:	4638      	mov	r0, r7
 8000934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000938:	89ab      	ldrh	r3, [r5, #12]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d907      	bls.n	800094e <_fwalk_reent+0x3a>
 800093e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000942:	3301      	adds	r3, #1
 8000944:	d003      	beq.n	800094e <_fwalk_reent+0x3a>
 8000946:	4629      	mov	r1, r5
 8000948:	4630      	mov	r0, r6
 800094a:	47c0      	blx	r8
 800094c:	4307      	orrs	r7, r0
 800094e:	3568      	adds	r5, #104	; 0x68
 8000950:	e7e9      	b.n	8000926 <_fwalk_reent+0x12>

08000952 <__retarget_lock_init_recursive>:
 8000952:	4770      	bx	lr

08000954 <__retarget_lock_acquire_recursive>:
 8000954:	4770      	bx	lr

08000956 <__retarget_lock_release_recursive>:
 8000956:	4770      	bx	lr

08000958 <sbrk_aligned>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4e0e      	ldr	r6, [pc, #56]	; (8000994 <sbrk_aligned+0x3c>)
 800095c:	460c      	mov	r4, r1
 800095e:	6831      	ldr	r1, [r6, #0]
 8000960:	4605      	mov	r5, r0
 8000962:	b911      	cbnz	r1, 800096a <sbrk_aligned+0x12>
 8000964:	f000 fb7a 	bl	800105c <_sbrk_r>
 8000968:	6030      	str	r0, [r6, #0]
 800096a:	4621      	mov	r1, r4
 800096c:	4628      	mov	r0, r5
 800096e:	f000 fb75 	bl	800105c <_sbrk_r>
 8000972:	1c43      	adds	r3, r0, #1
 8000974:	d00a      	beq.n	800098c <sbrk_aligned+0x34>
 8000976:	1cc4      	adds	r4, r0, #3
 8000978:	f024 0403 	bic.w	r4, r4, #3
 800097c:	42a0      	cmp	r0, r4
 800097e:	d007      	beq.n	8000990 <sbrk_aligned+0x38>
 8000980:	1a21      	subs	r1, r4, r0
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fb6a 	bl	800105c <_sbrk_r>
 8000988:	3001      	adds	r0, #1
 800098a:	d101      	bne.n	8000990 <sbrk_aligned+0x38>
 800098c:	f04f 34ff 	mov.w	r4, #4294967295
 8000990:	4620      	mov	r0, r4
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	20000098 	.word	0x20000098

08000998 <_malloc_r>:
 8000998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800099c:	1ccd      	adds	r5, r1, #3
 800099e:	f025 0503 	bic.w	r5, r5, #3
 80009a2:	3508      	adds	r5, #8
 80009a4:	2d0c      	cmp	r5, #12
 80009a6:	bf38      	it	cc
 80009a8:	250c      	movcc	r5, #12
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	4607      	mov	r7, r0
 80009ae:	db01      	blt.n	80009b4 <_malloc_r+0x1c>
 80009b0:	42a9      	cmp	r1, r5
 80009b2:	d905      	bls.n	80009c0 <_malloc_r+0x28>
 80009b4:	230c      	movs	r3, #12
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	2600      	movs	r6, #0
 80009ba:	4630      	mov	r0, r6
 80009bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009c0:	4e2e      	ldr	r6, [pc, #184]	; (8000a7c <_malloc_r+0xe4>)
 80009c2:	f000 fdbb 	bl	800153c <__malloc_lock>
 80009c6:	6833      	ldr	r3, [r6, #0]
 80009c8:	461c      	mov	r4, r3
 80009ca:	bb34      	cbnz	r4, 8000a1a <_malloc_r+0x82>
 80009cc:	4629      	mov	r1, r5
 80009ce:	4638      	mov	r0, r7
 80009d0:	f7ff ffc2 	bl	8000958 <sbrk_aligned>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	4604      	mov	r4, r0
 80009d8:	d14d      	bne.n	8000a76 <_malloc_r+0xde>
 80009da:	6834      	ldr	r4, [r6, #0]
 80009dc:	4626      	mov	r6, r4
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d140      	bne.n	8000a64 <_malloc_r+0xcc>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	4631      	mov	r1, r6
 80009e6:	4638      	mov	r0, r7
 80009e8:	eb04 0803 	add.w	r8, r4, r3
 80009ec:	f000 fb36 	bl	800105c <_sbrk_r>
 80009f0:	4580      	cmp	r8, r0
 80009f2:	d13a      	bne.n	8000a6a <_malloc_r+0xd2>
 80009f4:	6821      	ldr	r1, [r4, #0]
 80009f6:	3503      	adds	r5, #3
 80009f8:	1a6d      	subs	r5, r5, r1
 80009fa:	f025 0503 	bic.w	r5, r5, #3
 80009fe:	3508      	adds	r5, #8
 8000a00:	2d0c      	cmp	r5, #12
 8000a02:	bf38      	it	cc
 8000a04:	250c      	movcc	r5, #12
 8000a06:	4629      	mov	r1, r5
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f7ff ffa5 	bl	8000958 <sbrk_aligned>
 8000a0e:	3001      	adds	r0, #1
 8000a10:	d02b      	beq.n	8000a6a <_malloc_r+0xd2>
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	442b      	add	r3, r5
 8000a16:	6023      	str	r3, [r4, #0]
 8000a18:	e00e      	b.n	8000a38 <_malloc_r+0xa0>
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	1b52      	subs	r2, r2, r5
 8000a1e:	d41e      	bmi.n	8000a5e <_malloc_r+0xc6>
 8000a20:	2a0b      	cmp	r2, #11
 8000a22:	d916      	bls.n	8000a52 <_malloc_r+0xba>
 8000a24:	1961      	adds	r1, r4, r5
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	6025      	str	r5, [r4, #0]
 8000a2a:	bf18      	it	ne
 8000a2c:	6059      	strne	r1, [r3, #4]
 8000a2e:	6863      	ldr	r3, [r4, #4]
 8000a30:	bf08      	it	eq
 8000a32:	6031      	streq	r1, [r6, #0]
 8000a34:	5162      	str	r2, [r4, r5]
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	4638      	mov	r0, r7
 8000a3a:	f104 060b 	add.w	r6, r4, #11
 8000a3e:	f000 fd83 	bl	8001548 <__malloc_unlock>
 8000a42:	f026 0607 	bic.w	r6, r6, #7
 8000a46:	1d23      	adds	r3, r4, #4
 8000a48:	1af2      	subs	r2, r6, r3
 8000a4a:	d0b6      	beq.n	80009ba <_malloc_r+0x22>
 8000a4c:	1b9b      	subs	r3, r3, r6
 8000a4e:	50a3      	str	r3, [r4, r2]
 8000a50:	e7b3      	b.n	80009ba <_malloc_r+0x22>
 8000a52:	6862      	ldr	r2, [r4, #4]
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	bf0c      	ite	eq
 8000a58:	6032      	streq	r2, [r6, #0]
 8000a5a:	605a      	strne	r2, [r3, #4]
 8000a5c:	e7ec      	b.n	8000a38 <_malloc_r+0xa0>
 8000a5e:	4623      	mov	r3, r4
 8000a60:	6864      	ldr	r4, [r4, #4]
 8000a62:	e7b2      	b.n	80009ca <_malloc_r+0x32>
 8000a64:	4634      	mov	r4, r6
 8000a66:	6876      	ldr	r6, [r6, #4]
 8000a68:	e7b9      	b.n	80009de <_malloc_r+0x46>
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4638      	mov	r0, r7
 8000a70:	f000 fd6a 	bl	8001548 <__malloc_unlock>
 8000a74:	e7a1      	b.n	80009ba <_malloc_r+0x22>
 8000a76:	6025      	str	r5, [r4, #0]
 8000a78:	e7de      	b.n	8000a38 <_malloc_r+0xa0>
 8000a7a:	bf00      	nop
 8000a7c:	20000094 	.word	0x20000094

08000a80 <__sfputc_r>:
 8000a80:	6893      	ldr	r3, [r2, #8]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	b410      	push	{r4}
 8000a88:	6093      	str	r3, [r2, #8]
 8000a8a:	da08      	bge.n	8000a9e <__sfputc_r+0x1e>
 8000a8c:	6994      	ldr	r4, [r2, #24]
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	db01      	blt.n	8000a96 <__sfputc_r+0x16>
 8000a92:	290a      	cmp	r1, #10
 8000a94:	d103      	bne.n	8000a9e <__sfputc_r+0x1e>
 8000a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a9a:	f000 bb33 	b.w	8001104 <__swbuf_r>
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	1c58      	adds	r0, r3, #1
 8000aa2:	6010      	str	r0, [r2, #0]
 8000aa4:	7019      	strb	r1, [r3, #0]
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <__sfputs_r>:
 8000aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	460f      	mov	r7, r1
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	18d5      	adds	r5, r2, r3
 8000ab8:	42ac      	cmp	r4, r5
 8000aba:	d101      	bne.n	8000ac0 <__sfputs_r+0x12>
 8000abc:	2000      	movs	r0, #0
 8000abe:	e007      	b.n	8000ad0 <__sfputs_r+0x22>
 8000ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac4:	463a      	mov	r2, r7
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f7ff ffda 	bl	8000a80 <__sfputc_r>
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	d1f3      	bne.n	8000ab8 <__sfputs_r+0xa>
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ad4 <_vfiprintf_r>:
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	460d      	mov	r5, r1
 8000ada:	b09d      	sub	sp, #116	; 0x74
 8000adc:	4614      	mov	r4, r2
 8000ade:	4698      	mov	r8, r3
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	b118      	cbz	r0, 8000aec <_vfiprintf_r+0x18>
 8000ae4:	6983      	ldr	r3, [r0, #24]
 8000ae6:	b90b      	cbnz	r3, 8000aec <_vfiprintf_r+0x18>
 8000ae8:	f7ff fe96 	bl	8000818 <__sinit>
 8000aec:	4b89      	ldr	r3, [pc, #548]	; (8000d14 <_vfiprintf_r+0x240>)
 8000aee:	429d      	cmp	r5, r3
 8000af0:	d11b      	bne.n	8000b2a <_vfiprintf_r+0x56>
 8000af2:	6875      	ldr	r5, [r6, #4]
 8000af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000af6:	07d9      	lsls	r1, r3, #31
 8000af8:	d405      	bmi.n	8000b06 <_vfiprintf_r+0x32>
 8000afa:	89ab      	ldrh	r3, [r5, #12]
 8000afc:	059a      	lsls	r2, r3, #22
 8000afe:	d402      	bmi.n	8000b06 <_vfiprintf_r+0x32>
 8000b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b02:	f7ff ff27 	bl	8000954 <__retarget_lock_acquire_recursive>
 8000b06:	89ab      	ldrh	r3, [r5, #12]
 8000b08:	071b      	lsls	r3, r3, #28
 8000b0a:	d501      	bpl.n	8000b10 <_vfiprintf_r+0x3c>
 8000b0c:	692b      	ldr	r3, [r5, #16]
 8000b0e:	b9eb      	cbnz	r3, 8000b4c <_vfiprintf_r+0x78>
 8000b10:	4629      	mov	r1, r5
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 fb5a 	bl	80011cc <__swsetup_r>
 8000b18:	b1c0      	cbz	r0, 8000b4c <_vfiprintf_r+0x78>
 8000b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b1c:	07dc      	lsls	r4, r3, #31
 8000b1e:	d50e      	bpl.n	8000b3e <_vfiprintf_r+0x6a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	b01d      	add	sp, #116	; 0x74
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <_vfiprintf_r+0x244>)
 8000b2c:	429d      	cmp	r5, r3
 8000b2e:	d101      	bne.n	8000b34 <_vfiprintf_r+0x60>
 8000b30:	68b5      	ldr	r5, [r6, #8]
 8000b32:	e7df      	b.n	8000af4 <_vfiprintf_r+0x20>
 8000b34:	4b79      	ldr	r3, [pc, #484]	; (8000d1c <_vfiprintf_r+0x248>)
 8000b36:	429d      	cmp	r5, r3
 8000b38:	bf08      	it	eq
 8000b3a:	68f5      	ldreq	r5, [r6, #12]
 8000b3c:	e7da      	b.n	8000af4 <_vfiprintf_r+0x20>
 8000b3e:	89ab      	ldrh	r3, [r5, #12]
 8000b40:	0598      	lsls	r0, r3, #22
 8000b42:	d4ed      	bmi.n	8000b20 <_vfiprintf_r+0x4c>
 8000b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b46:	f7ff ff06 	bl	8000956 <__retarget_lock_release_recursive>
 8000b4a:	e7e9      	b.n	8000b20 <_vfiprintf_r+0x4c>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b50:	2320      	movs	r3, #32
 8000b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b5a:	2330      	movs	r3, #48	; 0x30
 8000b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d20 <_vfiprintf_r+0x24c>
 8000b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b64:	f04f 0901 	mov.w	r9, #1
 8000b68:	4623      	mov	r3, r4
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b70:	b10a      	cbz	r2, 8000b76 <_vfiprintf_r+0xa2>
 8000b72:	2a25      	cmp	r2, #37	; 0x25
 8000b74:	d1f9      	bne.n	8000b6a <_vfiprintf_r+0x96>
 8000b76:	ebba 0b04 	subs.w	fp, sl, r4
 8000b7a:	d00b      	beq.n	8000b94 <_vfiprintf_r+0xc0>
 8000b7c:	465b      	mov	r3, fp
 8000b7e:	4622      	mov	r2, r4
 8000b80:	4629      	mov	r1, r5
 8000b82:	4630      	mov	r0, r6
 8000b84:	f7ff ff93 	bl	8000aae <__sfputs_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	f000 80aa 	beq.w	8000ce2 <_vfiprintf_r+0x20e>
 8000b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b90:	445a      	add	r2, fp
 8000b92:	9209      	str	r2, [sp, #36]	; 0x24
 8000b94:	f89a 3000 	ldrb.w	r3, [sl]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 80a2 	beq.w	8000ce2 <_vfiprintf_r+0x20e>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ba8:	f10a 0a01 	add.w	sl, sl, #1
 8000bac:	9304      	str	r3, [sp, #16]
 8000bae:	9307      	str	r3, [sp, #28]
 8000bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8000bb6:	4654      	mov	r4, sl
 8000bb8:	2205      	movs	r2, #5
 8000bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bbe:	4858      	ldr	r0, [pc, #352]	; (8000d20 <_vfiprintf_r+0x24c>)
 8000bc0:	f7ff fb0e 	bl	80001e0 <memchr>
 8000bc4:	9a04      	ldr	r2, [sp, #16]
 8000bc6:	b9d8      	cbnz	r0, 8000c00 <_vfiprintf_r+0x12c>
 8000bc8:	06d1      	lsls	r1, r2, #27
 8000bca:	bf44      	itt	mi
 8000bcc:	2320      	movmi	r3, #32
 8000bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bd2:	0713      	lsls	r3, r2, #28
 8000bd4:	bf44      	itt	mi
 8000bd6:	232b      	movmi	r3, #43	; 0x2b
 8000bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8000be0:	2b2a      	cmp	r3, #42	; 0x2a
 8000be2:	d015      	beq.n	8000c10 <_vfiprintf_r+0x13c>
 8000be4:	9a07      	ldr	r2, [sp, #28]
 8000be6:	4654      	mov	r4, sl
 8000be8:	2000      	movs	r0, #0
 8000bea:	f04f 0c0a 	mov.w	ip, #10
 8000bee:	4621      	mov	r1, r4
 8000bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bf4:	3b30      	subs	r3, #48	; 0x30
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d94e      	bls.n	8000c98 <_vfiprintf_r+0x1c4>
 8000bfa:	b1b0      	cbz	r0, 8000c2a <_vfiprintf_r+0x156>
 8000bfc:	9207      	str	r2, [sp, #28]
 8000bfe:	e014      	b.n	8000c2a <_vfiprintf_r+0x156>
 8000c00:	eba0 0308 	sub.w	r3, r0, r8
 8000c04:	fa09 f303 	lsl.w	r3, r9, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	9304      	str	r3, [sp, #16]
 8000c0c:	46a2      	mov	sl, r4
 8000c0e:	e7d2      	b.n	8000bb6 <_vfiprintf_r+0xe2>
 8000c10:	9b03      	ldr	r3, [sp, #12]
 8000c12:	1d19      	adds	r1, r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	9103      	str	r1, [sp, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bfbb      	ittet	lt
 8000c1c:	425b      	neglt	r3, r3
 8000c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c22:	9307      	strge	r3, [sp, #28]
 8000c24:	9307      	strlt	r3, [sp, #28]
 8000c26:	bfb8      	it	lt
 8000c28:	9204      	strlt	r2, [sp, #16]
 8000c2a:	7823      	ldrb	r3, [r4, #0]
 8000c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000c2e:	d10c      	bne.n	8000c4a <_vfiprintf_r+0x176>
 8000c30:	7863      	ldrb	r3, [r4, #1]
 8000c32:	2b2a      	cmp	r3, #42	; 0x2a
 8000c34:	d135      	bne.n	8000ca2 <_vfiprintf_r+0x1ce>
 8000c36:	9b03      	ldr	r3, [sp, #12]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	9203      	str	r2, [sp, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bfb8      	it	lt
 8000c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c46:	3402      	adds	r4, #2
 8000c48:	9305      	str	r3, [sp, #20]
 8000c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d30 <_vfiprintf_r+0x25c>
 8000c4e:	7821      	ldrb	r1, [r4, #0]
 8000c50:	2203      	movs	r2, #3
 8000c52:	4650      	mov	r0, sl
 8000c54:	f7ff fac4 	bl	80001e0 <memchr>
 8000c58:	b140      	cbz	r0, 8000c6c <_vfiprintf_r+0x198>
 8000c5a:	2340      	movs	r3, #64	; 0x40
 8000c5c:	eba0 000a 	sub.w	r0, r0, sl
 8000c60:	fa03 f000 	lsl.w	r0, r3, r0
 8000c64:	9b04      	ldr	r3, [sp, #16]
 8000c66:	4303      	orrs	r3, r0
 8000c68:	3401      	adds	r4, #1
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c70:	482c      	ldr	r0, [pc, #176]	; (8000d24 <_vfiprintf_r+0x250>)
 8000c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c76:	2206      	movs	r2, #6
 8000c78:	f7ff fab2 	bl	80001e0 <memchr>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d03f      	beq.n	8000d00 <_vfiprintf_r+0x22c>
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <_vfiprintf_r+0x254>)
 8000c82:	bb1b      	cbnz	r3, 8000ccc <_vfiprintf_r+0x1f8>
 8000c84:	9b03      	ldr	r3, [sp, #12]
 8000c86:	3307      	adds	r3, #7
 8000c88:	f023 0307 	bic.w	r3, r3, #7
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	9303      	str	r3, [sp, #12]
 8000c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c92:	443b      	add	r3, r7
 8000c94:	9309      	str	r3, [sp, #36]	; 0x24
 8000c96:	e767      	b.n	8000b68 <_vfiprintf_r+0x94>
 8000c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e7a5      	b.n	8000bee <_vfiprintf_r+0x11a>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	3401      	adds	r4, #1
 8000ca6:	9305      	str	r3, [sp, #20]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 0c0a 	mov.w	ip, #10
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cb4:	3a30      	subs	r2, #48	; 0x30
 8000cb6:	2a09      	cmp	r2, #9
 8000cb8:	d903      	bls.n	8000cc2 <_vfiprintf_r+0x1ee>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0c5      	beq.n	8000c4a <_vfiprintf_r+0x176>
 8000cbe:	9105      	str	r1, [sp, #20]
 8000cc0:	e7c3      	b.n	8000c4a <_vfiprintf_r+0x176>
 8000cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e7f0      	b.n	8000cae <_vfiprintf_r+0x1da>
 8000ccc:	ab03      	add	r3, sp, #12
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	462a      	mov	r2, r5
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <_vfiprintf_r+0x258>)
 8000cd4:	a904      	add	r1, sp, #16
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f3af 8000 	nop.w
 8000cdc:	4607      	mov	r7, r0
 8000cde:	1c78      	adds	r0, r7, #1
 8000ce0:	d1d6      	bne.n	8000c90 <_vfiprintf_r+0x1bc>
 8000ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ce4:	07d9      	lsls	r1, r3, #31
 8000ce6:	d405      	bmi.n	8000cf4 <_vfiprintf_r+0x220>
 8000ce8:	89ab      	ldrh	r3, [r5, #12]
 8000cea:	059a      	lsls	r2, r3, #22
 8000cec:	d402      	bmi.n	8000cf4 <_vfiprintf_r+0x220>
 8000cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cf0:	f7ff fe31 	bl	8000956 <__retarget_lock_release_recursive>
 8000cf4:	89ab      	ldrh	r3, [r5, #12]
 8000cf6:	065b      	lsls	r3, r3, #25
 8000cf8:	f53f af12 	bmi.w	8000b20 <_vfiprintf_r+0x4c>
 8000cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cfe:	e711      	b.n	8000b24 <_vfiprintf_r+0x50>
 8000d00:	ab03      	add	r3, sp, #12
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	462a      	mov	r2, r5
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_vfiprintf_r+0x258>)
 8000d08:	a904      	add	r1, sp, #16
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	f000 f880 	bl	8000e10 <_printf_i>
 8000d10:	e7e4      	b.n	8000cdc <_vfiprintf_r+0x208>
 8000d12:	bf00      	nop
 8000d14:	080016b4 	.word	0x080016b4
 8000d18:	080016d4 	.word	0x080016d4
 8000d1c:	08001694 	.word	0x08001694
 8000d20:	080016f4 	.word	0x080016f4
 8000d24:	080016fe 	.word	0x080016fe
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	08000aaf 	.word	0x08000aaf
 8000d30:	080016fa 	.word	0x080016fa

08000d34 <_printf_common>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	4616      	mov	r6, r2
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	688a      	ldr	r2, [r1, #8]
 8000d3e:	690b      	ldr	r3, [r1, #16]
 8000d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	bfb8      	it	lt
 8000d48:	4613      	movlt	r3, r2
 8000d4a:	6033      	str	r3, [r6, #0]
 8000d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d50:	4607      	mov	r7, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	b10a      	cbz	r2, 8000d5a <_printf_common+0x26>
 8000d56:	3301      	adds	r3, #1
 8000d58:	6033      	str	r3, [r6, #0]
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	0699      	lsls	r1, r3, #26
 8000d5e:	bf42      	ittt	mi
 8000d60:	6833      	ldrmi	r3, [r6, #0]
 8000d62:	3302      	addmi	r3, #2
 8000d64:	6033      	strmi	r3, [r6, #0]
 8000d66:	6825      	ldr	r5, [r4, #0]
 8000d68:	f015 0506 	ands.w	r5, r5, #6
 8000d6c:	d106      	bne.n	8000d7c <_printf_common+0x48>
 8000d6e:	f104 0a19 	add.w	sl, r4, #25
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	6832      	ldr	r2, [r6, #0]
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	42ab      	cmp	r3, r5
 8000d7a:	dc26      	bgt.n	8000dca <_printf_common+0x96>
 8000d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d80:	1e13      	subs	r3, r2, #0
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	bf18      	it	ne
 8000d86:	2301      	movne	r3, #1
 8000d88:	0692      	lsls	r2, r2, #26
 8000d8a:	d42b      	bmi.n	8000de4 <_printf_common+0xb0>
 8000d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d90:	4649      	mov	r1, r9
 8000d92:	4638      	mov	r0, r7
 8000d94:	47c0      	blx	r8
 8000d96:	3001      	adds	r0, #1
 8000d98:	d01e      	beq.n	8000dd8 <_printf_common+0xa4>
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	68e5      	ldr	r5, [r4, #12]
 8000d9e:	6832      	ldr	r2, [r6, #0]
 8000da0:	f003 0306 	and.w	r3, r3, #6
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	bf08      	it	eq
 8000da8:	1aad      	subeq	r5, r5, r2
 8000daa:	68a3      	ldr	r3, [r4, #8]
 8000dac:	6922      	ldr	r2, [r4, #16]
 8000dae:	bf0c      	ite	eq
 8000db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000db4:	2500      	movne	r5, #0
 8000db6:	4293      	cmp	r3, r2
 8000db8:	bfc4      	itt	gt
 8000dba:	1a9b      	subgt	r3, r3, r2
 8000dbc:	18ed      	addgt	r5, r5, r3
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	341a      	adds	r4, #26
 8000dc2:	42b5      	cmp	r5, r6
 8000dc4:	d11a      	bne.n	8000dfc <_printf_common+0xc8>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e008      	b.n	8000ddc <_printf_common+0xa8>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4652      	mov	r2, sl
 8000dce:	4649      	mov	r1, r9
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	47c0      	blx	r8
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	d103      	bne.n	8000de0 <_printf_common+0xac>
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	3501      	adds	r5, #1
 8000de2:	e7c6      	b.n	8000d72 <_printf_common+0x3e>
 8000de4:	18e1      	adds	r1, r4, r3
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	2030      	movs	r0, #48	; 0x30
 8000dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dee:	4422      	add	r2, r4
 8000df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000df8:	3302      	adds	r3, #2
 8000dfa:	e7c7      	b.n	8000d8c <_printf_common+0x58>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4622      	mov	r2, r4
 8000e00:	4649      	mov	r1, r9
 8000e02:	4638      	mov	r0, r7
 8000e04:	47c0      	blx	r8
 8000e06:	3001      	adds	r0, #1
 8000e08:	d0e6      	beq.n	8000dd8 <_printf_common+0xa4>
 8000e0a:	3601      	adds	r6, #1
 8000e0c:	e7d9      	b.n	8000dc2 <_printf_common+0x8e>
	...

08000e10 <_printf_i>:
 8000e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e14:	7e0f      	ldrb	r7, [r1, #24]
 8000e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e18:	2f78      	cmp	r7, #120	; 0x78
 8000e1a:	4691      	mov	r9, r2
 8000e1c:	4680      	mov	r8, r0
 8000e1e:	460c      	mov	r4, r1
 8000e20:	469a      	mov	sl, r3
 8000e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e26:	d807      	bhi.n	8000e38 <_printf_i+0x28>
 8000e28:	2f62      	cmp	r7, #98	; 0x62
 8000e2a:	d80a      	bhi.n	8000e42 <_printf_i+0x32>
 8000e2c:	2f00      	cmp	r7, #0
 8000e2e:	f000 80d8 	beq.w	8000fe2 <_printf_i+0x1d2>
 8000e32:	2f58      	cmp	r7, #88	; 0x58
 8000e34:	f000 80a3 	beq.w	8000f7e <_printf_i+0x16e>
 8000e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e40:	e03a      	b.n	8000eb8 <_printf_i+0xa8>
 8000e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e46:	2b15      	cmp	r3, #21
 8000e48:	d8f6      	bhi.n	8000e38 <_printf_i+0x28>
 8000e4a:	a101      	add	r1, pc, #4	; (adr r1, 8000e50 <_printf_i+0x40>)
 8000e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e50:	08000ea9 	.word	0x08000ea9
 8000e54:	08000ebd 	.word	0x08000ebd
 8000e58:	08000e39 	.word	0x08000e39
 8000e5c:	08000e39 	.word	0x08000e39
 8000e60:	08000e39 	.word	0x08000e39
 8000e64:	08000e39 	.word	0x08000e39
 8000e68:	08000ebd 	.word	0x08000ebd
 8000e6c:	08000e39 	.word	0x08000e39
 8000e70:	08000e39 	.word	0x08000e39
 8000e74:	08000e39 	.word	0x08000e39
 8000e78:	08000e39 	.word	0x08000e39
 8000e7c:	08000fc9 	.word	0x08000fc9
 8000e80:	08000eed 	.word	0x08000eed
 8000e84:	08000fab 	.word	0x08000fab
 8000e88:	08000e39 	.word	0x08000e39
 8000e8c:	08000e39 	.word	0x08000e39
 8000e90:	08000feb 	.word	0x08000feb
 8000e94:	08000e39 	.word	0x08000e39
 8000e98:	08000eed 	.word	0x08000eed
 8000e9c:	08000e39 	.word	0x08000e39
 8000ea0:	08000e39 	.word	0x08000e39
 8000ea4:	08000fb3 	.word	0x08000fb3
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	1d1a      	adds	r2, r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	602a      	str	r2, [r5, #0]
 8000eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e0a3      	b.n	8001004 <_printf_i+0x1f4>
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	6829      	ldr	r1, [r5, #0]
 8000ec0:	0606      	lsls	r6, r0, #24
 8000ec2:	f101 0304 	add.w	r3, r1, #4
 8000ec6:	d50a      	bpl.n	8000ede <_printf_i+0xce>
 8000ec8:	680e      	ldr	r6, [r1, #0]
 8000eca:	602b      	str	r3, [r5, #0]
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	da03      	bge.n	8000ed8 <_printf_i+0xc8>
 8000ed0:	232d      	movs	r3, #45	; 0x2d
 8000ed2:	4276      	negs	r6, r6
 8000ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ed8:	485e      	ldr	r0, [pc, #376]	; (8001054 <_printf_i+0x244>)
 8000eda:	230a      	movs	r3, #10
 8000edc:	e019      	b.n	8000f12 <_printf_i+0x102>
 8000ede:	680e      	ldr	r6, [r1, #0]
 8000ee0:	602b      	str	r3, [r5, #0]
 8000ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000ee6:	bf18      	it	ne
 8000ee8:	b236      	sxthne	r6, r6
 8000eea:	e7ef      	b.n	8000ecc <_printf_i+0xbc>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	6820      	ldr	r0, [r4, #0]
 8000ef0:	1d19      	adds	r1, r3, #4
 8000ef2:	6029      	str	r1, [r5, #0]
 8000ef4:	0601      	lsls	r1, r0, #24
 8000ef6:	d501      	bpl.n	8000efc <_printf_i+0xec>
 8000ef8:	681e      	ldr	r6, [r3, #0]
 8000efa:	e002      	b.n	8000f02 <_printf_i+0xf2>
 8000efc:	0646      	lsls	r6, r0, #25
 8000efe:	d5fb      	bpl.n	8000ef8 <_printf_i+0xe8>
 8000f00:	881e      	ldrh	r6, [r3, #0]
 8000f02:	4854      	ldr	r0, [pc, #336]	; (8001054 <_printf_i+0x244>)
 8000f04:	2f6f      	cmp	r7, #111	; 0x6f
 8000f06:	bf0c      	ite	eq
 8000f08:	2308      	moveq	r3, #8
 8000f0a:	230a      	movne	r3, #10
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f12:	6865      	ldr	r5, [r4, #4]
 8000f14:	60a5      	str	r5, [r4, #8]
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	bfa2      	ittt	ge
 8000f1a:	6821      	ldrge	r1, [r4, #0]
 8000f1c:	f021 0104 	bicge.w	r1, r1, #4
 8000f20:	6021      	strge	r1, [r4, #0]
 8000f22:	b90e      	cbnz	r6, 8000f28 <_printf_i+0x118>
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d04d      	beq.n	8000fc4 <_printf_i+0x1b4>
 8000f28:	4615      	mov	r5, r2
 8000f2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f2e:	fb03 6711 	mls	r7, r3, r1, r6
 8000f32:	5dc7      	ldrb	r7, [r0, r7]
 8000f34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f38:	4637      	mov	r7, r6
 8000f3a:	42bb      	cmp	r3, r7
 8000f3c:	460e      	mov	r6, r1
 8000f3e:	d9f4      	bls.n	8000f2a <_printf_i+0x11a>
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d10b      	bne.n	8000f5c <_printf_i+0x14c>
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	07de      	lsls	r6, r3, #31
 8000f48:	d508      	bpl.n	8000f5c <_printf_i+0x14c>
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	6861      	ldr	r1, [r4, #4]
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	bfde      	ittt	le
 8000f52:	2330      	movle	r3, #48	; 0x30
 8000f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f5c:	1b52      	subs	r2, r2, r5
 8000f5e:	6122      	str	r2, [r4, #16]
 8000f60:	f8cd a000 	str.w	sl, [sp]
 8000f64:	464b      	mov	r3, r9
 8000f66:	aa03      	add	r2, sp, #12
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f7ff fee2 	bl	8000d34 <_printf_common>
 8000f70:	3001      	adds	r0, #1
 8000f72:	d14c      	bne.n	800100e <_printf_i+0x1fe>
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	b004      	add	sp, #16
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <_printf_i+0x244>)
 8000f80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f84:	6829      	ldr	r1, [r5, #0]
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f8c:	6029      	str	r1, [r5, #0]
 8000f8e:	061d      	lsls	r5, r3, #24
 8000f90:	d514      	bpl.n	8000fbc <_printf_i+0x1ac>
 8000f92:	07df      	lsls	r7, r3, #31
 8000f94:	bf44      	itt	mi
 8000f96:	f043 0320 	orrmi.w	r3, r3, #32
 8000f9a:	6023      	strmi	r3, [r4, #0]
 8000f9c:	b91e      	cbnz	r6, 8000fa6 <_printf_i+0x196>
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	f023 0320 	bic.w	r3, r3, #32
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	e7b0      	b.n	8000f0c <_printf_i+0xfc>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	2378      	movs	r3, #120	; 0x78
 8000fb4:	4828      	ldr	r0, [pc, #160]	; (8001058 <_printf_i+0x248>)
 8000fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fba:	e7e3      	b.n	8000f84 <_printf_i+0x174>
 8000fbc:	0659      	lsls	r1, r3, #25
 8000fbe:	bf48      	it	mi
 8000fc0:	b2b6      	uxthmi	r6, r6
 8000fc2:	e7e6      	b.n	8000f92 <_printf_i+0x182>
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	e7bb      	b.n	8000f40 <_printf_i+0x130>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	6826      	ldr	r6, [r4, #0]
 8000fcc:	6961      	ldr	r1, [r4, #20]
 8000fce:	1d18      	adds	r0, r3, #4
 8000fd0:	6028      	str	r0, [r5, #0]
 8000fd2:	0635      	lsls	r5, r6, #24
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	d501      	bpl.n	8000fdc <_printf_i+0x1cc>
 8000fd8:	6019      	str	r1, [r3, #0]
 8000fda:	e002      	b.n	8000fe2 <_printf_i+0x1d2>
 8000fdc:	0670      	lsls	r0, r6, #25
 8000fde:	d5fb      	bpl.n	8000fd8 <_printf_i+0x1c8>
 8000fe0:	8019      	strh	r1, [r3, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	6123      	str	r3, [r4, #16]
 8000fe6:	4615      	mov	r5, r2
 8000fe8:	e7ba      	b.n	8000f60 <_printf_i+0x150>
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	1d1a      	adds	r2, r3, #4
 8000fee:	602a      	str	r2, [r5, #0]
 8000ff0:	681d      	ldr	r5, [r3, #0]
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f7ff f8f2 	bl	80001e0 <memchr>
 8000ffc:	b108      	cbz	r0, 8001002 <_printf_i+0x1f2>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	6060      	str	r0, [r4, #4]
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	6123      	str	r3, [r4, #16]
 8001006:	2300      	movs	r3, #0
 8001008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800100c:	e7a8      	b.n	8000f60 <_printf_i+0x150>
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	462a      	mov	r2, r5
 8001012:	4649      	mov	r1, r9
 8001014:	4640      	mov	r0, r8
 8001016:	47d0      	blx	sl
 8001018:	3001      	adds	r0, #1
 800101a:	d0ab      	beq.n	8000f74 <_printf_i+0x164>
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d413      	bmi.n	800104a <_printf_i+0x23a>
 8001022:	68e0      	ldr	r0, [r4, #12]
 8001024:	9b03      	ldr	r3, [sp, #12]
 8001026:	4298      	cmp	r0, r3
 8001028:	bfb8      	it	lt
 800102a:	4618      	movlt	r0, r3
 800102c:	e7a4      	b.n	8000f78 <_printf_i+0x168>
 800102e:	2301      	movs	r3, #1
 8001030:	4632      	mov	r2, r6
 8001032:	4649      	mov	r1, r9
 8001034:	4640      	mov	r0, r8
 8001036:	47d0      	blx	sl
 8001038:	3001      	adds	r0, #1
 800103a:	d09b      	beq.n	8000f74 <_printf_i+0x164>
 800103c:	3501      	adds	r5, #1
 800103e:	68e3      	ldr	r3, [r4, #12]
 8001040:	9903      	ldr	r1, [sp, #12]
 8001042:	1a5b      	subs	r3, r3, r1
 8001044:	42ab      	cmp	r3, r5
 8001046:	dcf2      	bgt.n	800102e <_printf_i+0x21e>
 8001048:	e7eb      	b.n	8001022 <_printf_i+0x212>
 800104a:	2500      	movs	r5, #0
 800104c:	f104 0619 	add.w	r6, r4, #25
 8001050:	e7f5      	b.n	800103e <_printf_i+0x22e>
 8001052:	bf00      	nop
 8001054:	08001705 	.word	0x08001705
 8001058:	08001716 	.word	0x08001716

0800105c <_sbrk_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_sbrk_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff f9e0 	bl	800042c <_sbrk>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_sbrk_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_sbrk_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	2000009c 	.word	0x2000009c

0800107c <__sread>:
 800107c:	b510      	push	{r4, lr}
 800107e:	460c      	mov	r4, r1
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	f000 fab2 	bl	80015ec <_read_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	bfab      	itete	ge
 800108c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800108e:	89a3      	ldrhlt	r3, [r4, #12]
 8001090:	181b      	addge	r3, r3, r0
 8001092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001096:	bfac      	ite	ge
 8001098:	6563      	strge	r3, [r4, #84]	; 0x54
 800109a:	81a3      	strhlt	r3, [r4, #12]
 800109c:	bd10      	pop	{r4, pc}

0800109e <__swrite>:
 800109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	461f      	mov	r7, r3
 80010a4:	898b      	ldrh	r3, [r1, #12]
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4616      	mov	r6, r2
 80010ae:	d505      	bpl.n	80010bc <__swrite+0x1e>
 80010b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2200      	movs	r2, #0
 80010b8:	f000 f9c8 	bl	800144c <_lseek_r>
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	81a3      	strh	r3, [r4, #12]
 80010c8:	4632      	mov	r2, r6
 80010ca:	463b      	mov	r3, r7
 80010cc:	4628      	mov	r0, r5
 80010ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010d2:	f000 b869 	b.w	80011a8 <_write_r>

080010d6 <__sseek>:
 80010d6:	b510      	push	{r4, lr}
 80010d8:	460c      	mov	r4, r1
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 f9b5 	bl	800144c <_lseek_r>
 80010e2:	1c43      	adds	r3, r0, #1
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	bf15      	itete	ne
 80010e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010f2:	81a3      	strheq	r3, [r4, #12]
 80010f4:	bf18      	it	ne
 80010f6:	81a3      	strhne	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}

080010fa <__sclose>:
 80010fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fe:	f000 b8d3 	b.w	80012a8 <_close_r>
	...

08001104 <__swbuf_r>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	460e      	mov	r6, r1
 8001108:	4614      	mov	r4, r2
 800110a:	4605      	mov	r5, r0
 800110c:	b118      	cbz	r0, 8001116 <__swbuf_r+0x12>
 800110e:	6983      	ldr	r3, [r0, #24]
 8001110:	b90b      	cbnz	r3, 8001116 <__swbuf_r+0x12>
 8001112:	f7ff fb81 	bl	8000818 <__sinit>
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <__swbuf_r+0x98>)
 8001118:	429c      	cmp	r4, r3
 800111a:	d12b      	bne.n	8001174 <__swbuf_r+0x70>
 800111c:	686c      	ldr	r4, [r5, #4]
 800111e:	69a3      	ldr	r3, [r4, #24]
 8001120:	60a3      	str	r3, [r4, #8]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	071a      	lsls	r2, r3, #28
 8001126:	d52f      	bpl.n	8001188 <__swbuf_r+0x84>
 8001128:	6923      	ldr	r3, [r4, #16]
 800112a:	b36b      	cbz	r3, 8001188 <__swbuf_r+0x84>
 800112c:	6923      	ldr	r3, [r4, #16]
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	1ac0      	subs	r0, r0, r3
 8001132:	6963      	ldr	r3, [r4, #20]
 8001134:	b2f6      	uxtb	r6, r6
 8001136:	4283      	cmp	r3, r0
 8001138:	4637      	mov	r7, r6
 800113a:	dc04      	bgt.n	8001146 <__swbuf_r+0x42>
 800113c:	4621      	mov	r1, r4
 800113e:	4628      	mov	r0, r5
 8001140:	f000 f948 	bl	80013d4 <_fflush_r>
 8001144:	bb30      	cbnz	r0, 8001194 <__swbuf_r+0x90>
 8001146:	68a3      	ldr	r3, [r4, #8]
 8001148:	3b01      	subs	r3, #1
 800114a:	60a3      	str	r3, [r4, #8]
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6022      	str	r2, [r4, #0]
 8001152:	701e      	strb	r6, [r3, #0]
 8001154:	6963      	ldr	r3, [r4, #20]
 8001156:	3001      	adds	r0, #1
 8001158:	4283      	cmp	r3, r0
 800115a:	d004      	beq.n	8001166 <__swbuf_r+0x62>
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	07db      	lsls	r3, r3, #31
 8001160:	d506      	bpl.n	8001170 <__swbuf_r+0x6c>
 8001162:	2e0a      	cmp	r6, #10
 8001164:	d104      	bne.n	8001170 <__swbuf_r+0x6c>
 8001166:	4621      	mov	r1, r4
 8001168:	4628      	mov	r0, r5
 800116a:	f000 f933 	bl	80013d4 <_fflush_r>
 800116e:	b988      	cbnz	r0, 8001194 <__swbuf_r+0x90>
 8001170:	4638      	mov	r0, r7
 8001172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <__swbuf_r+0x9c>)
 8001176:	429c      	cmp	r4, r3
 8001178:	d101      	bne.n	800117e <__swbuf_r+0x7a>
 800117a:	68ac      	ldr	r4, [r5, #8]
 800117c:	e7cf      	b.n	800111e <__swbuf_r+0x1a>
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <__swbuf_r+0xa0>)
 8001180:	429c      	cmp	r4, r3
 8001182:	bf08      	it	eq
 8001184:	68ec      	ldreq	r4, [r5, #12]
 8001186:	e7ca      	b.n	800111e <__swbuf_r+0x1a>
 8001188:	4621      	mov	r1, r4
 800118a:	4628      	mov	r0, r5
 800118c:	f000 f81e 	bl	80011cc <__swsetup_r>
 8001190:	2800      	cmp	r0, #0
 8001192:	d0cb      	beq.n	800112c <__swbuf_r+0x28>
 8001194:	f04f 37ff 	mov.w	r7, #4294967295
 8001198:	e7ea      	b.n	8001170 <__swbuf_r+0x6c>
 800119a:	bf00      	nop
 800119c:	080016b4 	.word	0x080016b4
 80011a0:	080016d4 	.word	0x080016d4
 80011a4:	08001694 	.word	0x08001694

080011a8 <_write_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d07      	ldr	r5, [pc, #28]	; (80011c8 <_write_r+0x20>)
 80011ac:	4604      	mov	r4, r0
 80011ae:	4608      	mov	r0, r1
 80011b0:	4611      	mov	r1, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	602a      	str	r2, [r5, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff f8e7 	bl	800038a <_write>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_write_r+0x1e>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_write_r+0x1e>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	2000009c 	.word	0x2000009c

080011cc <__swsetup_r>:
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <__swsetup_r+0xcc>)
 80011ce:	b570      	push	{r4, r5, r6, lr}
 80011d0:	681d      	ldr	r5, [r3, #0]
 80011d2:	4606      	mov	r6, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	b125      	cbz	r5, 80011e2 <__swsetup_r+0x16>
 80011d8:	69ab      	ldr	r3, [r5, #24]
 80011da:	b913      	cbnz	r3, 80011e2 <__swsetup_r+0x16>
 80011dc:	4628      	mov	r0, r5
 80011de:	f7ff fb1b 	bl	8000818 <__sinit>
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <__swsetup_r+0xd0>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d10f      	bne.n	8001208 <__swsetup_r+0x3c>
 80011e8:	686c      	ldr	r4, [r5, #4]
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011f0:	0719      	lsls	r1, r3, #28
 80011f2:	d42c      	bmi.n	800124e <__swsetup_r+0x82>
 80011f4:	06dd      	lsls	r5, r3, #27
 80011f6:	d411      	bmi.n	800121c <__swsetup_r+0x50>
 80011f8:	2309      	movs	r3, #9
 80011fa:	6033      	str	r3, [r6, #0]
 80011fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001200:	81a3      	strh	r3, [r4, #12]
 8001202:	f04f 30ff 	mov.w	r0, #4294967295
 8001206:	e03e      	b.n	8001286 <__swsetup_r+0xba>
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <__swsetup_r+0xd4>)
 800120a:	429c      	cmp	r4, r3
 800120c:	d101      	bne.n	8001212 <__swsetup_r+0x46>
 800120e:	68ac      	ldr	r4, [r5, #8]
 8001210:	e7eb      	b.n	80011ea <__swsetup_r+0x1e>
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <__swsetup_r+0xd8>)
 8001214:	429c      	cmp	r4, r3
 8001216:	bf08      	it	eq
 8001218:	68ec      	ldreq	r4, [r5, #12]
 800121a:	e7e6      	b.n	80011ea <__swsetup_r+0x1e>
 800121c:	0758      	lsls	r0, r3, #29
 800121e:	d512      	bpl.n	8001246 <__swsetup_r+0x7a>
 8001220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001222:	b141      	cbz	r1, 8001236 <__swsetup_r+0x6a>
 8001224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001228:	4299      	cmp	r1, r3
 800122a:	d002      	beq.n	8001232 <__swsetup_r+0x66>
 800122c:	4630      	mov	r0, r6
 800122e:	f000 f991 	bl	8001554 <_free_r>
 8001232:	2300      	movs	r3, #0
 8001234:	6363      	str	r3, [r4, #52]	; 0x34
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	2300      	movs	r3, #0
 8001240:	6063      	str	r3, [r4, #4]
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	b94b      	cbnz	r3, 8001266 <__swsetup_r+0x9a>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d003      	beq.n	8001266 <__swsetup_r+0x9a>
 800125e:	4621      	mov	r1, r4
 8001260:	4630      	mov	r0, r6
 8001262:	f000 f92b 	bl	80014bc <__smakebuf_r>
 8001266:	89a0      	ldrh	r0, [r4, #12]
 8001268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800126c:	f010 0301 	ands.w	r3, r0, #1
 8001270:	d00a      	beq.n	8001288 <__swsetup_r+0xbc>
 8001272:	2300      	movs	r3, #0
 8001274:	60a3      	str	r3, [r4, #8]
 8001276:	6963      	ldr	r3, [r4, #20]
 8001278:	425b      	negs	r3, r3
 800127a:	61a3      	str	r3, [r4, #24]
 800127c:	6923      	ldr	r3, [r4, #16]
 800127e:	b943      	cbnz	r3, 8001292 <__swsetup_r+0xc6>
 8001280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001284:	d1ba      	bne.n	80011fc <__swsetup_r+0x30>
 8001286:	bd70      	pop	{r4, r5, r6, pc}
 8001288:	0781      	lsls	r1, r0, #30
 800128a:	bf58      	it	pl
 800128c:	6963      	ldrpl	r3, [r4, #20]
 800128e:	60a3      	str	r3, [r4, #8]
 8001290:	e7f4      	b.n	800127c <__swsetup_r+0xb0>
 8001292:	2000      	movs	r0, #0
 8001294:	e7f7      	b.n	8001286 <__swsetup_r+0xba>
 8001296:	bf00      	nop
 8001298:	20000004 	.word	0x20000004
 800129c:	080016b4 	.word	0x080016b4
 80012a0:	080016d4 	.word	0x080016d4
 80012a4:	08001694 	.word	0x08001694

080012a8 <_close_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d06      	ldr	r5, [pc, #24]	; (80012c4 <_close_r+0x1c>)
 80012ac:	2300      	movs	r3, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	f7ff f885 	bl	80003c2 <_close>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_close_r+0x1a>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_close_r+0x1a>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	2000009c 	.word	0x2000009c

080012c8 <__sflush_r>:
 80012c8:	898a      	ldrh	r2, [r1, #12]
 80012ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ce:	4605      	mov	r5, r0
 80012d0:	0710      	lsls	r0, r2, #28
 80012d2:	460c      	mov	r4, r1
 80012d4:	d458      	bmi.n	8001388 <__sflush_r+0xc0>
 80012d6:	684b      	ldr	r3, [r1, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dc05      	bgt.n	80012e8 <__sflush_r+0x20>
 80012dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dc02      	bgt.n	80012e8 <__sflush_r+0x20>
 80012e2:	2000      	movs	r0, #0
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d0f9      	beq.n	80012e2 <__sflush_r+0x1a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012f4:	682f      	ldr	r7, [r5, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	d032      	beq.n	8001360 <__sflush_r+0x98>
 80012fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	075a      	lsls	r2, r3, #29
 8001300:	d505      	bpl.n	800130e <__sflush_r+0x46>
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001308:	b10b      	cbz	r3, 800130e <__sflush_r+0x46>
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	1ac0      	subs	r0, r0, r3
 800130e:	2300      	movs	r3, #0
 8001310:	4602      	mov	r2, r0
 8001312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001314:	6a21      	ldr	r1, [r4, #32]
 8001316:	4628      	mov	r0, r5
 8001318:	47b0      	blx	r6
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	d106      	bne.n	800132e <__sflush_r+0x66>
 8001320:	6829      	ldr	r1, [r5, #0]
 8001322:	291d      	cmp	r1, #29
 8001324:	d82c      	bhi.n	8001380 <__sflush_r+0xb8>
 8001326:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <__sflush_r+0x108>)
 8001328:	40ca      	lsrs	r2, r1
 800132a:	07d6      	lsls	r6, r2, #31
 800132c:	d528      	bpl.n	8001380 <__sflush_r+0xb8>
 800132e:	2200      	movs	r2, #0
 8001330:	6062      	str	r2, [r4, #4]
 8001332:	04d9      	lsls	r1, r3, #19
 8001334:	6922      	ldr	r2, [r4, #16]
 8001336:	6022      	str	r2, [r4, #0]
 8001338:	d504      	bpl.n	8001344 <__sflush_r+0x7c>
 800133a:	1c42      	adds	r2, r0, #1
 800133c:	d101      	bne.n	8001342 <__sflush_r+0x7a>
 800133e:	682b      	ldr	r3, [r5, #0]
 8001340:	b903      	cbnz	r3, 8001344 <__sflush_r+0x7c>
 8001342:	6560      	str	r0, [r4, #84]	; 0x54
 8001344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001346:	602f      	str	r7, [r5, #0]
 8001348:	2900      	cmp	r1, #0
 800134a:	d0ca      	beq.n	80012e2 <__sflush_r+0x1a>
 800134c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001350:	4299      	cmp	r1, r3
 8001352:	d002      	beq.n	800135a <__sflush_r+0x92>
 8001354:	4628      	mov	r0, r5
 8001356:	f000 f8fd 	bl	8001554 <_free_r>
 800135a:	2000      	movs	r0, #0
 800135c:	6360      	str	r0, [r4, #52]	; 0x34
 800135e:	e7c1      	b.n	80012e4 <__sflush_r+0x1c>
 8001360:	6a21      	ldr	r1, [r4, #32]
 8001362:	2301      	movs	r3, #1
 8001364:	4628      	mov	r0, r5
 8001366:	47b0      	blx	r6
 8001368:	1c41      	adds	r1, r0, #1
 800136a:	d1c7      	bne.n	80012fc <__sflush_r+0x34>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0c4      	beq.n	80012fc <__sflush_r+0x34>
 8001372:	2b1d      	cmp	r3, #29
 8001374:	d001      	beq.n	800137a <__sflush_r+0xb2>
 8001376:	2b16      	cmp	r3, #22
 8001378:	d101      	bne.n	800137e <__sflush_r+0xb6>
 800137a:	602f      	str	r7, [r5, #0]
 800137c:	e7b1      	b.n	80012e2 <__sflush_r+0x1a>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001384:	81a3      	strh	r3, [r4, #12]
 8001386:	e7ad      	b.n	80012e4 <__sflush_r+0x1c>
 8001388:	690f      	ldr	r7, [r1, #16]
 800138a:	2f00      	cmp	r7, #0
 800138c:	d0a9      	beq.n	80012e2 <__sflush_r+0x1a>
 800138e:	0793      	lsls	r3, r2, #30
 8001390:	680e      	ldr	r6, [r1, #0]
 8001392:	bf08      	it	eq
 8001394:	694b      	ldreq	r3, [r1, #20]
 8001396:	600f      	str	r7, [r1, #0]
 8001398:	bf18      	it	ne
 800139a:	2300      	movne	r3, #0
 800139c:	eba6 0807 	sub.w	r8, r6, r7
 80013a0:	608b      	str	r3, [r1, #8]
 80013a2:	f1b8 0f00 	cmp.w	r8, #0
 80013a6:	dd9c      	ble.n	80012e2 <__sflush_r+0x1a>
 80013a8:	6a21      	ldr	r1, [r4, #32]
 80013aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013ac:	4643      	mov	r3, r8
 80013ae:	463a      	mov	r2, r7
 80013b0:	4628      	mov	r0, r5
 80013b2:	47b0      	blx	r6
 80013b4:	2800      	cmp	r0, #0
 80013b6:	dc06      	bgt.n	80013c6 <__sflush_r+0xfe>
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e78e      	b.n	80012e4 <__sflush_r+0x1c>
 80013c6:	4407      	add	r7, r0
 80013c8:	eba8 0800 	sub.w	r8, r8, r0
 80013cc:	e7e9      	b.n	80013a2 <__sflush_r+0xda>
 80013ce:	bf00      	nop
 80013d0:	20400001 	.word	0x20400001

080013d4 <_fflush_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	690b      	ldr	r3, [r1, #16]
 80013d8:	4605      	mov	r5, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	b913      	cbnz	r3, 80013e4 <_fflush_r+0x10>
 80013de:	2500      	movs	r5, #0
 80013e0:	4628      	mov	r0, r5
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
 80013e4:	b118      	cbz	r0, 80013ee <_fflush_r+0x1a>
 80013e6:	6983      	ldr	r3, [r0, #24]
 80013e8:	b90b      	cbnz	r3, 80013ee <_fflush_r+0x1a>
 80013ea:	f7ff fa15 	bl	8000818 <__sinit>
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <_fflush_r+0x6c>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	d11b      	bne.n	800142c <_fflush_r+0x58>
 80013f4:	686c      	ldr	r4, [r5, #4]
 80013f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ef      	beq.n	80013de <_fflush_r+0xa>
 80013fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001400:	07d0      	lsls	r0, r2, #31
 8001402:	d404      	bmi.n	800140e <_fflush_r+0x3a>
 8001404:	0599      	lsls	r1, r3, #22
 8001406:	d402      	bmi.n	800140e <_fflush_r+0x3a>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff faa3 	bl	8000954 <__retarget_lock_acquire_recursive>
 800140e:	4628      	mov	r0, r5
 8001410:	4621      	mov	r1, r4
 8001412:	f7ff ff59 	bl	80012c8 <__sflush_r>
 8001416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001418:	07da      	lsls	r2, r3, #31
 800141a:	4605      	mov	r5, r0
 800141c:	d4e0      	bmi.n	80013e0 <_fflush_r+0xc>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	059b      	lsls	r3, r3, #22
 8001422:	d4dd      	bmi.n	80013e0 <_fflush_r+0xc>
 8001424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001426:	f7ff fa96 	bl	8000956 <__retarget_lock_release_recursive>
 800142a:	e7d9      	b.n	80013e0 <_fflush_r+0xc>
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <_fflush_r+0x70>)
 800142e:	429c      	cmp	r4, r3
 8001430:	d101      	bne.n	8001436 <_fflush_r+0x62>
 8001432:	68ac      	ldr	r4, [r5, #8]
 8001434:	e7df      	b.n	80013f6 <_fflush_r+0x22>
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <_fflush_r+0x74>)
 8001438:	429c      	cmp	r4, r3
 800143a:	bf08      	it	eq
 800143c:	68ec      	ldreq	r4, [r5, #12]
 800143e:	e7da      	b.n	80013f6 <_fflush_r+0x22>
 8001440:	080016b4 	.word	0x080016b4
 8001444:	080016d4 	.word	0x080016d4
 8001448:	08001694 	.word	0x08001694

0800144c <_lseek_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d07      	ldr	r5, [pc, #28]	; (800146c <_lseek_r+0x20>)
 8001450:	4604      	mov	r4, r0
 8001452:	4608      	mov	r0, r1
 8001454:	4611      	mov	r1, r2
 8001456:	2200      	movs	r2, #0
 8001458:	602a      	str	r2, [r5, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	f7fe ffd8 	bl	8000410 <_lseek>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_lseek_r+0x1e>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_lseek_r+0x1e>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	2000009c 	.word	0x2000009c

08001470 <__swhatbuf_r>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	460e      	mov	r6, r1
 8001474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001478:	2900      	cmp	r1, #0
 800147a:	b096      	sub	sp, #88	; 0x58
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	da08      	bge.n	8001494 <__swhatbuf_r+0x24>
 8001482:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	602a      	str	r2, [r5, #0]
 800148a:	061a      	lsls	r2, r3, #24
 800148c:	d410      	bmi.n	80014b0 <__swhatbuf_r+0x40>
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	e00e      	b.n	80014b2 <__swhatbuf_r+0x42>
 8001494:	466a      	mov	r2, sp
 8001496:	f000 f8bb 	bl	8001610 <_fstat_r>
 800149a:	2800      	cmp	r0, #0
 800149c:	dbf1      	blt.n	8001482 <__swhatbuf_r+0x12>
 800149e:	9a01      	ldr	r2, [sp, #4]
 80014a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80014a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80014a8:	425a      	negs	r2, r3
 80014aa:	415a      	adcs	r2, r3
 80014ac:	602a      	str	r2, [r5, #0]
 80014ae:	e7ee      	b.n	800148e <__swhatbuf_r+0x1e>
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	2000      	movs	r0, #0
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	b016      	add	sp, #88	; 0x58
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080014bc <__smakebuf_r>:
 80014bc:	898b      	ldrh	r3, [r1, #12]
 80014be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014c0:	079d      	lsls	r5, r3, #30
 80014c2:	4606      	mov	r6, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	d507      	bpl.n	80014d8 <__smakebuf_r+0x1c>
 80014c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	6123      	str	r3, [r4, #16]
 80014d0:	2301      	movs	r3, #1
 80014d2:	6163      	str	r3, [r4, #20]
 80014d4:	b002      	add	sp, #8
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	ab01      	add	r3, sp, #4
 80014da:	466a      	mov	r2, sp
 80014dc:	f7ff ffc8 	bl	8001470 <__swhatbuf_r>
 80014e0:	9900      	ldr	r1, [sp, #0]
 80014e2:	4605      	mov	r5, r0
 80014e4:	4630      	mov	r0, r6
 80014e6:	f7ff fa57 	bl	8000998 <_malloc_r>
 80014ea:	b948      	cbnz	r0, 8001500 <__smakebuf_r+0x44>
 80014ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f0:	059a      	lsls	r2, r3, #22
 80014f2:	d4ef      	bmi.n	80014d4 <__smakebuf_r+0x18>
 80014f4:	f023 0303 	bic.w	r3, r3, #3
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	81a3      	strh	r3, [r4, #12]
 80014fe:	e7e3      	b.n	80014c8 <__smakebuf_r+0xc>
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <__smakebuf_r+0x7c>)
 8001502:	62b3      	str	r3, [r6, #40]	; 0x28
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	6020      	str	r0, [r4, #0]
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	81a3      	strh	r3, [r4, #12]
 800150e:	9b00      	ldr	r3, [sp, #0]
 8001510:	6163      	str	r3, [r4, #20]
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	6120      	str	r0, [r4, #16]
 8001516:	b15b      	cbz	r3, 8001530 <__smakebuf_r+0x74>
 8001518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800151c:	4630      	mov	r0, r6
 800151e:	f000 f889 	bl	8001634 <_isatty_r>
 8001522:	b128      	cbz	r0, 8001530 <__smakebuf_r+0x74>
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	89a0      	ldrh	r0, [r4, #12]
 8001532:	4305      	orrs	r5, r0
 8001534:	81a5      	strh	r5, [r4, #12]
 8001536:	e7cd      	b.n	80014d4 <__smakebuf_r+0x18>
 8001538:	080007b1 	.word	0x080007b1

0800153c <__malloc_lock>:
 800153c:	4801      	ldr	r0, [pc, #4]	; (8001544 <__malloc_lock+0x8>)
 800153e:	f7ff ba09 	b.w	8000954 <__retarget_lock_acquire_recursive>
 8001542:	bf00      	nop
 8001544:	20000090 	.word	0x20000090

08001548 <__malloc_unlock>:
 8001548:	4801      	ldr	r0, [pc, #4]	; (8001550 <__malloc_unlock+0x8>)
 800154a:	f7ff ba04 	b.w	8000956 <__retarget_lock_release_recursive>
 800154e:	bf00      	nop
 8001550:	20000090 	.word	0x20000090

08001554 <_free_r>:
 8001554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001556:	2900      	cmp	r1, #0
 8001558:	d044      	beq.n	80015e4 <_free_r+0x90>
 800155a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800155e:	9001      	str	r0, [sp, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f1a1 0404 	sub.w	r4, r1, #4
 8001566:	bfb8      	it	lt
 8001568:	18e4      	addlt	r4, r4, r3
 800156a:	f7ff ffe7 	bl	800153c <__malloc_lock>
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <_free_r+0x94>)
 8001570:	9801      	ldr	r0, [sp, #4]
 8001572:	6813      	ldr	r3, [r2, #0]
 8001574:	b933      	cbnz	r3, 8001584 <_free_r+0x30>
 8001576:	6063      	str	r3, [r4, #4]
 8001578:	6014      	str	r4, [r2, #0]
 800157a:	b003      	add	sp, #12
 800157c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001580:	f7ff bfe2 	b.w	8001548 <__malloc_unlock>
 8001584:	42a3      	cmp	r3, r4
 8001586:	d908      	bls.n	800159a <_free_r+0x46>
 8001588:	6825      	ldr	r5, [r4, #0]
 800158a:	1961      	adds	r1, r4, r5
 800158c:	428b      	cmp	r3, r1
 800158e:	bf01      	itttt	eq
 8001590:	6819      	ldreq	r1, [r3, #0]
 8001592:	685b      	ldreq	r3, [r3, #4]
 8001594:	1949      	addeq	r1, r1, r5
 8001596:	6021      	streq	r1, [r4, #0]
 8001598:	e7ed      	b.n	8001576 <_free_r+0x22>
 800159a:	461a      	mov	r2, r3
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	b10b      	cbz	r3, 80015a4 <_free_r+0x50>
 80015a0:	42a3      	cmp	r3, r4
 80015a2:	d9fa      	bls.n	800159a <_free_r+0x46>
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	1855      	adds	r5, r2, r1
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	d10b      	bne.n	80015c4 <_free_r+0x70>
 80015ac:	6824      	ldr	r4, [r4, #0]
 80015ae:	4421      	add	r1, r4
 80015b0:	1854      	adds	r4, r2, r1
 80015b2:	42a3      	cmp	r3, r4
 80015b4:	6011      	str	r1, [r2, #0]
 80015b6:	d1e0      	bne.n	800157a <_free_r+0x26>
 80015b8:	681c      	ldr	r4, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	6053      	str	r3, [r2, #4]
 80015be:	4421      	add	r1, r4
 80015c0:	6011      	str	r1, [r2, #0]
 80015c2:	e7da      	b.n	800157a <_free_r+0x26>
 80015c4:	d902      	bls.n	80015cc <_free_r+0x78>
 80015c6:	230c      	movs	r3, #12
 80015c8:	6003      	str	r3, [r0, #0]
 80015ca:	e7d6      	b.n	800157a <_free_r+0x26>
 80015cc:	6825      	ldr	r5, [r4, #0]
 80015ce:	1961      	adds	r1, r4, r5
 80015d0:	428b      	cmp	r3, r1
 80015d2:	bf04      	itt	eq
 80015d4:	6819      	ldreq	r1, [r3, #0]
 80015d6:	685b      	ldreq	r3, [r3, #4]
 80015d8:	6063      	str	r3, [r4, #4]
 80015da:	bf04      	itt	eq
 80015dc:	1949      	addeq	r1, r1, r5
 80015de:	6021      	streq	r1, [r4, #0]
 80015e0:	6054      	str	r4, [r2, #4]
 80015e2:	e7ca      	b.n	800157a <_free_r+0x26>
 80015e4:	b003      	add	sp, #12
 80015e6:	bd30      	pop	{r4, r5, pc}
 80015e8:	20000094 	.word	0x20000094

080015ec <_read_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d07      	ldr	r5, [pc, #28]	; (800160c <_read_r+0x20>)
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	2200      	movs	r2, #0
 80015f8:	602a      	str	r2, [r5, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f7fe fea8 	bl	8000350 <_read>
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	d102      	bne.n	800160a <_read_r+0x1e>
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	b103      	cbz	r3, 800160a <_read_r+0x1e>
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	bd38      	pop	{r3, r4, r5, pc}
 800160c:	2000009c 	.word	0x2000009c

08001610 <_fstat_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4d07      	ldr	r5, [pc, #28]	; (8001630 <_fstat_r+0x20>)
 8001614:	2300      	movs	r3, #0
 8001616:	4604      	mov	r4, r0
 8001618:	4608      	mov	r0, r1
 800161a:	4611      	mov	r1, r2
 800161c:	602b      	str	r3, [r5, #0]
 800161e:	f7fe fedc 	bl	80003da <_fstat>
 8001622:	1c43      	adds	r3, r0, #1
 8001624:	d102      	bne.n	800162c <_fstat_r+0x1c>
 8001626:	682b      	ldr	r3, [r5, #0]
 8001628:	b103      	cbz	r3, 800162c <_fstat_r+0x1c>
 800162a:	6023      	str	r3, [r4, #0]
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	2000009c 	.word	0x2000009c

08001634 <_isatty_r>:
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4d06      	ldr	r5, [pc, #24]	; (8001650 <_isatty_r+0x1c>)
 8001638:	2300      	movs	r3, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	602b      	str	r3, [r5, #0]
 8001640:	f7fe fedb 	bl	80003fa <_isatty>
 8001644:	1c43      	adds	r3, r0, #1
 8001646:	d102      	bne.n	800164e <_isatty_r+0x1a>
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	b103      	cbz	r3, 800164e <_isatty_r+0x1a>
 800164c:	6023      	str	r3, [r4, #0]
 800164e:	bd38      	pop	{r3, r4, r5, pc}
 8001650:	2000009c 	.word	0x2000009c

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
