
f411_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  0800051c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  0800051c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000524  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000528  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000528  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006e4  00000000  00000000  00021c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  000222f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00022520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001774  00000000  00000000  000226f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002889  00000000  00000000  00023e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082513  00000000  00000000  000266f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b0  00000000  00000000  000a8c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000504 	.word	0x08000504

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000504 	.word	0x08000504

080001d8 <main>:

char key;

static void uart_callback (void);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0



	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <main+0x30>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30


	//Set PA5 as output
	GPIOA->MODER |= (1u<<10);
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <main+0x34>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1u<<11);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_rx_interrupt_init();
 8000200:	f000 f898 	bl	8000334 <uart2_rx_interrupt_init>


while(1){
 8000204:	e7fe      	b.n	8000204 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <uart_callback>:

}

}
static void uart_callback (void){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000216:	4b10      	ldr	r3, [pc, #64]	; (8000258 <uart_callback+0x48>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <uart_callback+0x4c>)
 800021e:	701a      	strb	r2, [r3, #0]
	int i=0;
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
	if (key == 'a'){
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <uart_callback+0x4c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b61      	cmp	r3, #97	; 0x61
 800022a:	d106      	bne.n	800023a <uart_callback+0x2a>
		GPIOA->ODR |= LED_PIN;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <uart_callback+0x50>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <uart_callback+0x50>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6153      	str	r3, [r2, #20]
 8000238:	e005      	b.n	8000246 <uart_callback+0x36>
	}
	else{
		GPIOA->ODR &= ~LED_PIN;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <uart_callback+0x50>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a08      	ldr	r2, [pc, #32]	; (8000260 <uart_callback+0x50>)
 8000240:	f023 0320 	bic.w	r3, r3, #32
 8000244:	6153      	str	r3, [r2, #20]
	}
	i++;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	40004400 	.word	0x40004400
 800025c:	20000020 	.word	0x20000020
 8000260:	40020000 	.word	0x40020000

08000264 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	//check if RXNE is set
	if (USART2->SR  & SR_RXNE){
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <USART2_IRQHandler+0x18>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 0320 	and.w	r3, r3, #32
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <USART2_IRQHandler+0x14>
		//do something
		uart_callback ();
 8000274:	f7ff ffcc 	bl	8000210 <uart_callback>
	}
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40004400 	.word	0x40004400

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <NMI_Handler+0x4>

08000286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028a:	e7fe      	b.n	800028a <HardFault_Handler+0x4>

0800028c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <MemManage_Handler+0x4>

08000292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <BusFault_Handler+0x4>

08000298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800029c:	e7fe      	b.n	800029c <UsageFault_Handler+0x4>

0800029e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002cc:	f000 f8e2 	bl	8000494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <SystemInit+0x20>)
 80002da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <SystemInit+0x20>)
 80002e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4907      	ldr	r1, [pc, #28]	; (8000330 <__NVIC_EnableIRQ+0x38>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e100 	.word	0xe000e100

08000334 <uart2_rx_interrupt_init>:
	USART2 -> CR1 |= CR1_UE;

}


void uart2_rx_interrupt_init(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//---------configure uart gpıo pin--------
	//enable clock accsess to gpioa
	RCC->AHB1ENR |= GPIOAEN;
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <uart2_rx_interrupt_init+0xb0>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <uart2_rx_interrupt_init+0xb0>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6313      	str	r3, [r2, #48]	; 0x30

	// set PA2 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<4);
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800034a:	f023 0310 	bic.w	r3, r3, #16
 800034e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<5);
 8000350:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6013      	str	r3, [r2, #0]

	//set PA2 alternate. function. type to UART_TX (AF07)
	GPIOA->AFR[0] |= ((1u<<10)|(1u<<9)|(1u<<8));
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000366:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<11);
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a1e      	ldr	r2, [pc, #120]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800036e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000372:	6213      	str	r3, [r2, #32]

	//set PA3 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<6);
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800037a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<7);
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038a:	6013      	str	r3, [r2, #0]

	//set PA3 alternate. function. type to UART_RX (AF07)
	GPIOA->AFR[0] |= ((1u<<12)|(1u<<13)|(1u<<14));
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 8000392:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<15);
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <uart2_rx_interrupt_init+0xb4>)
 800039e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003a2:	6213      	str	r3, [r2, #32]

	//---------configure uart module ---------
	//enable clock access
	RCC->APB1ENR |= UART2EN;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <uart2_rx_interrupt_init+0xb0>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <uart2_rx_interrupt_init+0xb0>)
 80003aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ae:	6413      	str	r3, [r2, #64]	; 0x40

	//configure the uart baud rate
	uart_set_baudrate(USART2 ,APB1_CLK ,UART_BAUDRATE);
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	490d      	ldr	r1, [pc, #52]	; (80003ec <uart2_rx_interrupt_init+0xb8>)
 80003b6:	480e      	ldr	r0, [pc, #56]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003b8:	f000 f81c 	bl	80003f4 <uart_set_baudrate>

	//congigure the transfer direction
	USART2 -> CR1 = (CR1_TE | CR1_RE);
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003be:	220c      	movs	r2, #12
 80003c0:	60da      	str	r2, [r3, #12]

	//enable RXNE interrupt
	USART2 -> CR1 |= CR1_RXNEIE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003c8:	f043 0320 	orr.w	r3, r3, #32
 80003cc:	60d3      	str	r3, [r2, #12]

	//enable UART2 intrrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 80003ce:	2026      	movs	r0, #38	; 0x26
 80003d0:	f7ff ff92 	bl	80002f8 <__NVIC_EnableIRQ>

	//enable uart module
	USART2 -> CR1 |= CR1_UE;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <uart2_rx_interrupt_init+0xbc>)
 80003da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003de:	60d3      	str	r3, [r2, #12]

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020000 	.word	0x40020000
 80003ec:	00f42400 	.word	0x00f42400
 80003f0:	40004400 	.word	0x40004400

080003f4 <uart_set_baudrate>:
	//write to transmit data register
	USART2 -> DR = (ch & 0xFF);
}


static void uart_set_baudrate( USART_TypeDef *USARTx ,uint32_t PeriphClk, uint32_t BaudRate){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
 USARTx->BRR  = compute_uart_bd(PeriphClk ,BaudRate);
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	68b8      	ldr	r0, [r7, #8]
 8000404:	f000 f808 	bl	8000418 <compute_uart_bd>
 8000408:	4603      	mov	r3, r0
 800040a:	461a      	mov	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	609a      	str	r2, [r3, #8]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
return	((PeriphClk + (BaudRate/2u))/BaudRate);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	085a      	lsrs	r2, r3, #1
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	441a      	add	r2, r3
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000430:	b29b      	uxth	r3, r3
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000446:	490e      	ldr	r1, [pc, #56]	; (8000480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800045c:	4c0b      	ldr	r4, [pc, #44]	; (800048c <LoopFillZerobss+0x26>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800046a:	f7ff ff33 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800046e:	f000 f825 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000472:	f7ff feb1 	bl	80001d8 <main>
  bx  lr    
 8000476:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000484:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 8000488:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800048c:	20000028 	.word	0x20000028

08000490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC_IRQHandler>
	...

08000494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_IncTick+0x20>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_IncTick+0x24>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_IncTick+0x24>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000024 	.word	0x20000024

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	4d0d      	ldr	r5, [pc, #52]	; (80004f4 <__libc_init_array+0x38>)
 80004c0:	4c0d      	ldr	r4, [pc, #52]	; (80004f8 <__libc_init_array+0x3c>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	2600      	movs	r6, #0
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	4d0b      	ldr	r5, [pc, #44]	; (80004fc <__libc_init_array+0x40>)
 80004ce:	4c0c      	ldr	r4, [pc, #48]	; (8000500 <__libc_init_array+0x44>)
 80004d0:	f000 f818 	bl	8000504 <_init>
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	2600      	movs	r6, #0
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
