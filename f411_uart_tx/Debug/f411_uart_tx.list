
f411_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  08000444  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800044c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000450  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000450  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001436  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000522  00000000  00000000  0002146a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c0f  00000000  00000000  00021d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ef2  00000000  00000000  00035917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e60f  00000000  00000000  00037809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  000b5e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000428 	.word	0x08000428

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000428 	.word	0x08000428

080001d8 <main>:
static void uart_set_baudrate( USART_TypeDef *USARTx ,uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_tx_init(void);
void uart2_write(int ch);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80001dc:	f000 f820 	bl	8000220 <uart2_tx_init>


while(1){
	uart2_write("A");
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <main+0x14>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f804 	bl	80001f0 <uart2_write>
 80001e8:	e7fa      	b.n	80001e0 <main+0x8>
 80001ea:	bf00      	nop
 80001ec:	08000440 	.word	0x08000440

080001f0 <uart2_write>:
}
}
void uart2_write(int ch){
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	//make sure transmit data register is empty
	while (!(USART2-> SR & SR_TXE)){}
 80001f8:	bf00      	nop
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <uart2_write+0x2c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <uart2_write+0xa>
	//write to transmit data register

	USART2 -> DR = (ch & 0xFF);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <uart2_write+0x2c>)
 800020a:	b2db      	uxtb	r3, r3
 800020c:	6053      	str	r3, [r2, #4]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40004400 	.word	0x40004400

08000220 <uart2_tx_init>:
void uart2_tx_init(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	//---------configure uart gpÄ±o pin--------
	//enable clock accsess to gpioa
	RCC->AHB1ENR |= GPIOEN;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <uart2_tx_init+0x70>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <uart2_tx_init+0x70>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30

	// set PA2 mode to alt. func. mode
	GPIOA->MODER &= ~(1u<<4);
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <uart2_tx_init+0x74>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <uart2_tx_init+0x74>)
 8000236:	f023 0310 	bic.w	r3, r3, #16
 800023a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1u<<5);
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <uart2_tx_init+0x74>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <uart2_tx_init+0x74>)
 8000242:	f043 0320 	orr.w	r3, r3, #32
 8000246:	6013      	str	r3, [r2, #0]

	//set PA2 alternate. function. type to UART_TX (AF07)
	GPIOA->AFR[0] |= ((1u<<10)|(1u<<9)|(1u<<8));
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <uart2_tx_init+0x74>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a11      	ldr	r2, [pc, #68]	; (8000294 <uart2_tx_init+0x74>)
 800024e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1u<<11);
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <uart2_tx_init+0x74>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <uart2_tx_init+0x74>)
 800025a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025e:	6213      	str	r3, [r2, #32]

	//---------configure uart module ---------
	//enable clock access
	RCC->APB1ENR |= UART2EN;
 8000260:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <uart2_tx_init+0x70>)
 8000262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000264:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <uart2_tx_init+0x70>)
 8000266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026a:	6413      	str	r3, [r2, #64]	; 0x40

	//configure the uart baud rate
	uart_set_baudrate(USART2 ,APB1_CLK ,UART_BAUDRATE);
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	4909      	ldr	r1, [pc, #36]	; (8000298 <uart2_tx_init+0x78>)
 8000272:	480a      	ldr	r0, [pc, #40]	; (800029c <uart2_tx_init+0x7c>)
 8000274:	f000 f814 	bl	80002a0 <uart_set_baudrate>

	//congigure the transfer direction
	USART2 -> CR1 = CR1_TE;
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <uart2_tx_init+0x7c>)
 800027a:	2208      	movs	r2, #8
 800027c:	60da      	str	r2, [r3, #12]

	//enable uart module
	USART2 -> CR1 |= CR1_UE;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <uart2_tx_init+0x7c>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <uart2_tx_init+0x7c>)
 8000284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000288:	60d3      	str	r3, [r2, #12]

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000
 8000298:	00f42400 	.word	0x00f42400
 800029c:	40004400 	.word	0x40004400

080002a0 <uart_set_baudrate>:

static void uart_set_baudrate( USART_TypeDef *USARTx ,uint32_t PeriphClk, uint32_t BaudRate){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 USARTx->BRR  = compute_uart_bd(PeriphClk ,BaudRate);
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	68b8      	ldr	r0, [r7, #8]
 80002b0:	f000 f808 	bl	80002c4 <compute_uart_bd>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	609a      	str	r2, [r3, #8]
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
return	((PeriphClk + (BaudRate/2u))/BaudRate);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	085a      	lsrs	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	441a      	add	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002dc:	b29b      	uxth	r3, r3
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <NMI_Handler+0x4>

080002f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <HardFault_Handler+0x4>

080002f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <MemManage_Handler+0x4>

080002fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <BusFault_Handler+0x4>

08000302 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <UsageFault_Handler+0x4>

08000308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000336:	f000 f83f 	bl	80003b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800039c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000380:	4c0b      	ldr	r4, [pc, #44]	; (80003b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800038e:	f7ff ffd7 	bl	8000340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f825 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000396:	f7ff ff1f 	bl	80001d8 <main>
  bx  lr    
 800039a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a8:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b0:	20000024 	.word	0x20000024

080003b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x20>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_IncTick+0x24>)
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000020 	.word	0x20000020

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	; (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	; (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	; (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000444 	.word	0x08000444
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000448 	.word	0x08000448

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
